<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[专利数据爬取（博客测试）]]></title>
    <url>%2Fhm773%2F27633c18.html</url>
    <content type="text"><![CDATA[一.模块加载与登录检索 1234567import csvimport timeimport pandas as pdfrom selenium import webdriverfrom selenium.webdriver.common.by import Byfrom selenium.webdriver.support.ui import WebDriverWaitfrom selenium.webdriver.support import expected_conditions as EC 1234567891011121314151617181920212223242526272829303132#登陆验证driver = webdriver.Chrome()driver.get( "http://www.pss-system.gov.cn/sipopublicsearch/portal/uilogin-forwardLogin.shtml")locator = (By.LINK_TEXT, '登录')try: WebDriverWait(driver, 20, 0.5).until( EC.presence_of_element_located(locator)) name = driver.find_element_by_xpath('//input[@name="j_username"]') name.send_keys("hm773") password = driver.find_element_by_xpath('//input[@id="j_password_show"]') password.send_keys('1234567890qaz') captcha = driver.find_element_by_xpath( '//input[@name="j_validation_code"]') captcha.send_keys(input("输入验证码："))finally: driver.find_element_by_xpath('//a[@class="btn btn-login"]').click()time.sleep(2)print('验证通过，刷新页面中。。。')driver.get( 'http://www.pss-system.gov.cn/sipopublicsearch/patentsearch/tableSearch-showTableSearchIndex.shtml')time.sleep(2)#输入检索要求name = driver.find_element_by_xpath('//input[@indexcnname="IPC分类号"]')name.send_keys(input("输入检索分类号，如：A23"))summary = driver.find_element_by_xpath('//input[@indexcnname="摘要"]')summary.send_keys(input("输入检索摘要,如：药食"))driver.find_element_by_xpath('//a[@class="btn btn-search"]').click()print("请等待数据加载完成，请勿关闭打开的页面。")print("如需对搜索结果过滤请在打开的页面设定过滤条件进行过滤，不需过滤请运行下一条命令。") 输入验证码：93 验证通过，刷新页面中。。。 输入检索分类号，如：A23A23 输入检索摘要,如：药食药食 请等待数据加载完成，请勿关闭打开的页面。 如需对搜索结果过滤请在打开的页面设定过滤条件进行过滤，不需过滤请运行下一条命令。 二.字段信息爬取（需修改）1234567#专利标题every_title = []for link in driver.find_elements_by_xpath( '//div[@class="item-header clear"]/h1/div[2]/a/b'): title = link.text every_title.append(title)every_title 12345678#申请号every_id = []for link in driver.find_elements_by_xpath( '//div[@class="item-content-body left"]/p[1]'): item_id = link.text item_id = item_id.replace('申请号 :', '') every_id.append(item_id)every_id 12345678#申请日every_date = []for link in driver.find_elements_by_xpath( '//div[@class="item-content-body left"]/p[2]/a'): item_date = link.text #item_id = item_id.replace('申请号 :','') every_date.append(item_date)every_date 12345678#公开号every_public_id = []for link in driver.find_elements_by_xpath( '//div[@class="item-content-body left"]/p[3]'): public_id = link.text public_id = public_id.replace('公开（公告）号 :', '') every_public_id.append(public_id)every_public_id 12345678#公开日every_public_date = []for link in driver.find_elements_by_xpath( '//div[@class="item-content-body left"]/p[4]/a'): public_date = link.text #item_id = item_id.replace('申请号 :','') every_public_date.append(public_date)every_public_date 12345678#IPC分类号every_ipc = []for link in driver.find_elements_by_xpath( '//div[@class="item-content-body left"]/p[5]'): ipc = link.text ipc = ipc.replace('\n', '').replace('IPC分类号 :', '') every_ipc.append(ipc)every_ipc 12345678#申请人every_applyer = []for link in driver.find_elements_by_xpath( '//div[@class="item-content-body left"]/p[6]'): applyer = link.text applyer = applyer.replace('\n', '').replace('申请（专利权）人 :', '') every_applyer.append(applyer)every_applyer 12345678#发明人every_creater = []for link in driver.find_elements_by_xpath( '//div[@class="item-content-body left"]/p[7]'): creater = link.text creater = creater.replace('\n', '').replace('发明人 :', '') every_creater.append(creater)every_creater 12345678#代理人every_agent = []for link in driver.find_elements_by_xpath( '//div[@class="item-content-body left"]/p[8]'): agent = link.text agent = agent.replace('\n', '').replace('代理人 :', '') every_agent.append(agent)every_agent 12345678#代理机构every_agent_group = []for link in driver.find_elements_by_xpath( '//div[@class="item-content-body left"]/p[9]'): agent_group = link.text agent_group = agent_group.replace('\n', '').replace('代理机构 :', '') every_agent_group.append(agent_group)every_agent_group 1234567891011121314151617181920212223f_title = pd.Series(every_title)f_id = pd.Series(every_id)f_date = pd.Series(every_date)f_public_id = pd.Series(every_public_id)f_public_date = pd.Series(every_public_date)f_ipc = pd.Series(every_ipc)f_applyer = pd.Series(every_applyer)f_creater = pd.Series(every_creater)f_agent = pd.Series(every_agent)f_agent_group = pd.Series(every_agent_group)info = pd.DataFrame(&#123; '专利标题': f_title, '申请号': f_id, '申请日': f_date, '公开号': f_public_id, '公开日': f_public_date, 'IPC号': f_ipc, '申请人': f_applyer, '发明人': f_creater, '代理人': f_agent, '代理机构': f_agent_group&#125;)info.to_csv('test_result.csv', index=False) 三.详览页面爬取（分步操作）1.刷新列表内容123456789101112131415161718#切换浏览器状态（爬取一次后列表信息会留存，需通过切换状态刷新）del itemwindows = driver.window_handlesdriver.switch_to.window(windows[0])status = driver.find_element_by_xpath('//a[@mode="SEARCH_MODE"]')select_status = status.get_attribute('class')if 'select' in select_status: driver.find_element_by_xpath('//a[@mode="TABLE_MODE"]').click() time.sleep(2) item = driver.find_elements_by_xpath('//a[@title="详览"]') print("列表式")else: driver.find_element_by_xpath('//a[@mode="SEARCH_MODE"]').click() time.sleep(2) item = driver.find_elements_by_xpath('//a[@role="detail"]') print('搜索式')#获取结果列表print(len(item)) 2.打开详览页面获取信息（报错重新run步骤1）123456789101112131415161718192021222324252627282930313233343536373839404142Row1 = []Row2 = []for i in range(0, len(item)): item[i].click() time.sleep(1) windows = driver.window_handles driver.switch_to.window(windows[1]) try: #element语句判断页面某元素是否加载完成 element = WebDriverWait(driver, 40).until( EC.presence_of_element_located((By.CLASS_NAME, "table-container-title"))) #获取信息 Row1.append("编号") Row1.append("专利名称") Row2.append(i) name = driver.find_element_by_xpath( '//div[@class="table-container-title"]').text Row2.append(name) rowCount = len( driver.find_elements_by_xpath( '//div[@class="table-container"]/table/tbody/tr')) for n in range(1, rowCount): row1 = (driver.find_element_by_xpath( '//div[@class="table-container"]/table/tbody/tr[%s]/td[1]' % (n)).text) row2 = (driver.find_element_by_xpath( '//div[@class="table-container"]/table/tbody/tr[%s]/td[2]' % (n)).text) Row1.append(row1) Row2.append(row2) Row1.append("摘要") zhaiyao = driver.find_element_by_xpath('//*[@class="content"]').text Row2.append(zhaiyao) Rw1 = pd.Series(Row1) Rw2 = pd.Series(Row2) total = pd.DataFrame(&#123;"属性": Rw1, "值": Rw2&#125;) finally: driver.close() print(name) driver.switch_to.window(windows[0]) time.sleep(1) 1total.to_csv('test_专利.csv',index=True,mode='w',encoding="utf-8") 3.爬取详览内容1234567891011121314151617181920windows = driver.window_handlesdriver.switch_to.window(windows[1])rowCount = len( driver.find_elements_by_xpath( '//div[@class="table-container"]/table/tbody/tr'))Row1 = []Row2 = []for i in range(1, rowCount): row1 = (driver.find_element_by_xpath( '//div[@class="table-container"]/table/tbody/tr[%s]/td[1]' % (i)).text) row2 = (driver.find_element_by_xpath( '//div[@class="table-container"]/table/tbody/tr[%s]/td[2]' % (i)).text) Row1.append(row1) Row2.append(row2)Row1.append("摘要")zhaiyao = driver.find_element_by_xpath('//*[@class="content"]').textRow2.append(zhaiyao)Rw1 = pd.Series(Row1)Rw2 = pd.Series(Row2)total = pd.DataFrame(&#123;"属性":Rw1,"值":Rw2&#125;) 4.翻页123#手动翻页driver.find_element_by_link_text('下一页').click()print("请重复1，2步操作") 详览信息获取123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263for l in range(1, 10): windows = driver.window_handles driver.switch_to.window(windows[0]) select_status = status.get_attribute('class') if 'select' in select_status: driver.find_element_by_xpath('//a[@mode="TABLE_MODE"]').click() print("列表式") else: driver.find_element_by_xpath('//a[@mode="SEARCH_MODE"]').click() print('搜索式') #获取结果列表 wait = WebDriverWait(driver, 40) button = wait.until( EC.element_to_be_clickable((By.XPATH, '//a[@role="detail"]'))) item = driver.find_elements_by_xpath('//a[@role="detail"]') print(len(item)) Row1 = [] Row2 = [] for i in range(0, len(item)): item[i].click() time.sleep(1) windows = driver.window_handles driver.switch_to.window(windows[1]) try: #element语句判断页面某元素是否加载完成 element = WebDriverWait(driver, 40).until( EC.presence_of_element_located((By.CLASS_NAME, "table-container-title"))) #获取信息 Row1.append("编号") Row1.append("专利名称") Row2.append(i) name = driver.find_element_by_xpath( '//div[@class="table-container-title"]').text Row2.append(name) rowCount = len( driver.find_elements_by_xpath( '//div[@class="table-container"]/table/tbody/tr')) for n in range(1, rowCount): row1 = (driver.find_element_by_xpath( '//div[@class="table-container"]/table/tbody/tr[%s]/td[1]' % (n)).text) row2 = (driver.find_element_by_xpath( '//div[@class="table-container"]/table/tbody/tr[%s]/td[2]' % (n)).text) Row1.append(row1) Row2.append(row2) Row1.append("摘要") zhaiyao = driver.find_element_by_xpath( '//*[@class="content"]').text Row2.append(zhaiyao) Rw1 = pd.Series(Row1) Rw2 = pd.Series(Row2) total = pd.DataFrame(&#123;"属性": Rw1, "值": Rw2&#125;) total.to_csv('test_for_10.csv', index=True) finally: driver.close() print(name) driver.switch_to.window(windows[0]) time.sleep(1) print("第" + str(l) + "页") driver.find_element_by_link_text('下一页').click() time.sleep(20) 搜索式 12 发明名称 --- 一种提高免疫力的营养保健饮料 发明名称 --- 一种健脾养元的食品组合物及其制备方法 发明名称 --- 提升人体新陈代谢进行减肥的药食同源食品及制备方法 发明名称 --- 药膳羊肚及其制备方法 发明名称 --- 一种具有温肾助阳功效的药食同源组合物及其制备方法 发明名称 --- 一种美肌嫩肤蜂王浆组合物 发明名称 --- 一种菜用黄麻泡菜茶及其制备方法 发明名称 --- 一种具有提神抗疲劳功效的蜂王浆组合物 发明名称 --- 一种含有乌梅的组合物及其制备方法和用途 发明名称 --- 一种降脂减肥的固体饮品及其制备方法 发明名称 --- 一种缓解体力疲劳的洋参阿胶糕制备方法 发明名称 --- 一种适合三高人群的玉谷康营养早餐及其制备方法 第1页 列表式 12 --------------------------------------------------------------------------- WebDriverException Traceback (most recent call last) &lt;ipython-input-20-59068cf3475d&gt; in &lt;module&gt; 18 Row2 = [] 19 for i in range(0, len(item)): ---&gt; 20 item[i].click() 21 time.sleep(1) 22 windows = driver.window_handles ~\AppData\Local\conda\conda\envs\tensorflow\lib\site-packages\selenium\webdriver\remote\webelement.py in click(self) 78 def click(self): 79 &quot;&quot;&quot;Clicks the element.&quot;&quot;&quot; ---&gt; 80 self._execute(Command.CLICK_ELEMENT) 81 82 def submit(self): ~\AppData\Local\conda\conda\envs\tensorflow\lib\site-packages\selenium\webdriver\remote\webelement.py in _execute(self, command, params) 631 params = {} 632 params[&apos;id&apos;] = self._id --&gt; 633 return self._parent.execute(command, params) 634 635 def find_element(self, by=By.ID, value=None): ~\AppData\Local\conda\conda\envs\tensorflow\lib\site-packages\selenium\webdriver\remote\webdriver.py in execute(self, driver_command, params) 319 response = self.command_executor.execute(driver_command, params) 320 if response: --&gt; 321 self.error_handler.check_response(response) 322 response[&apos;value&apos;] = self._unwrap_value( 323 response.get(&apos;value&apos;, None)) ~\AppData\Local\conda\conda\envs\tensorflow\lib\site-packages\selenium\webdriver\remote\errorhandler.py in check_response(self, response) 240 alert_text = value[&apos;alert&apos;].get(&apos;text&apos;) 241 raise exception_class(message, screen, stacktrace, alert_text) --&gt; 242 raise exception_class(message, screen, stacktrace) 243 244 def _value_or_default(self, obj, key, default): WebDriverException: Message: unknown error: Element &lt;a href=&quot;javascript:void(0);&quot; onclick=&quot;detail_single(this);&quot; role=&quot;detail&quot; title=&quot;详览&quot; class=&quot;full-text_sm in-bl&quot;&gt;&lt;/a&gt; is not clickable at point (637, 10). Other element would receive the click: &lt;div id=&quot;tool_sort&quot; class=&quot;select in-bl jq-select-container&quot; style=&quot;vertical-align: top; display: none; width: 120px; height: 30px;&quot; data-height=&quot;30&quot; data-width=&quot;120&quot; data-border=&quot;false&quot; data-handler=&quot;sort_tool_callback&quot; value=&quot;-APD&quot;&gt;...&lt;/div&gt; (Session info: chrome=72.0.3626.119) (Driver info: chromedriver=2.43.600210 (68dcf5eebde37173d4027fa8635e332711d2874a),platform=Windows NT 10.0.17763 x86_64) 详览其二1item [&lt;selenium.webdriver.remote.webelement.WebElement (session=&quot;ead56071ee2fe51b7a5fe3963e39963f&quot;, element=&quot;0.15422172092949826-211&quot;)&gt;, &lt;selenium.webdriver.remote.webelement.WebElement (session=&quot;ead56071ee2fe51b7a5fe3963e39963f&quot;, element=&quot;0.15422172092949826-212&quot;)&gt;, &lt;selenium.webdriver.remote.webelement.WebElement (session=&quot;ead56071ee2fe51b7a5fe3963e39963f&quot;, element=&quot;0.15422172092949826-213&quot;)&gt;, &lt;selenium.webdriver.remote.webelement.WebElement (session=&quot;ead56071ee2fe51b7a5fe3963e39963f&quot;, element=&quot;0.15422172092949826-214&quot;)&gt;, &lt;selenium.webdriver.remote.webelement.WebElement (session=&quot;ead56071ee2fe51b7a5fe3963e39963f&quot;, element=&quot;0.15422172092949826-215&quot;)&gt;, &lt;selenium.webdriver.remote.webelement.WebElement (session=&quot;ead56071ee2fe51b7a5fe3963e39963f&quot;, element=&quot;0.15422172092949826-216&quot;)&gt;, &lt;selenium.webdriver.remote.webelement.WebElement (session=&quot;ead56071ee2fe51b7a5fe3963e39963f&quot;, element=&quot;0.15422172092949826-217&quot;)&gt;, &lt;selenium.webdriver.remote.webelement.WebElement (session=&quot;ead56071ee2fe51b7a5fe3963e39963f&quot;, element=&quot;0.15422172092949826-218&quot;)&gt;, &lt;selenium.webdriver.remote.webelement.WebElement (session=&quot;ead56071ee2fe51b7a5fe3963e39963f&quot;, element=&quot;0.15422172092949826-219&quot;)&gt;, &lt;selenium.webdriver.remote.webelement.WebElement (session=&quot;ead56071ee2fe51b7a5fe3963e39963f&quot;, element=&quot;0.15422172092949826-220&quot;)&gt;, &lt;selenium.webdriver.remote.webelement.WebElement (session=&quot;ead56071ee2fe51b7a5fe3963e39963f&quot;, element=&quot;0.15422172092949826-221&quot;)&gt;, &lt;selenium.webdriver.remote.webelement.WebElement (session=&quot;ead56071ee2fe51b7a5fe3963e39963f&quot;, element=&quot;0.15422172092949826-222&quot;)&gt;] 12]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>博客</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2Fhm773%2F4a17b156.html</url>
    <content type="text"><![CDATA[Welcome to my blog, enter password to read. Incorrect Password! No content to display! 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]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>建站</tag>
        <tag>新手入门</tag>
      </tags>
  </entry>
</search>
