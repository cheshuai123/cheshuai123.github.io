<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[专利数据爬取（博客测试）]]></title>
    <url>%2Fhm773%2F27633c18.html</url>
    <content type="text"><![CDATA[一.模块加载与登录检索 1234567import csvimport timeimport pandas as pdfrom selenium import webdriverfrom selenium.webdriver.common.by import Byfrom selenium.webdriver.support.ui import WebDriverWaitfrom selenium.webdriver.support import expected_conditions as EC 1234567891011121314151617181920212223242526272829303132#登陆验证driver = webdriver.Chrome()driver.get( "http://www.pss-system.gov.cn/sipopublicsearch/portal/uilogin-forwardLogin.shtml")locator = (By.LINK_TEXT, '登录')try: WebDriverWait(driver, 20, 0.5).until( EC.presence_of_element_located(locator)) name = driver.find_element_by_xpath('//input[@name="j_username"]') name.send_keys("hm773") password = driver.find_element_by_xpath('//input[@id="j_password_show"]') password.send_keys('1234567890qaz') captcha = driver.find_element_by_xpath( '//input[@name="j_validation_code"]') captcha.send_keys(input("输入验证码："))finally: driver.find_element_by_xpath('//a[@class="btn btn-login"]').click()time.sleep(2)print('验证通过，刷新页面中。。。')driver.get( 'http://www.pss-system.gov.cn/sipopublicsearch/patentsearch/tableSearch-showTableSearchIndex.shtml')time.sleep(2)#输入检索要求name = driver.find_element_by_xpath('//input[@indexcnname="IPC分类号"]')name.send_keys(input("输入检索分类号，如：A23"))summary = driver.find_element_by_xpath('//input[@indexcnname="摘要"]')summary.send_keys(input("输入检索摘要,如：药食"))driver.find_element_by_xpath('//a[@class="btn btn-search"]').click()print("请等待数据加载完成，请勿关闭打开的页面。")print("如需对搜索结果过滤请在打开的页面设定过滤条件进行过滤，不需过滤请运行下一条命令。") 输入验证码：93 验证通过，刷新页面中。。。 输入检索分类号，如：A23A23 输入检索摘要,如：药食药食 请等待数据加载完成，请勿关闭打开的页面。 如需对搜索结果过滤请在打开的页面设定过滤条件进行过滤，不需过滤请运行下一条命令。 二.字段信息爬取（需修改）1234567#专利标题every_title = []for link in driver.find_elements_by_xpath( '//div[@class="item-header clear"]/h1/div[2]/a/b'): title = link.text every_title.append(title)every_title 12345678#申请号every_id = []for link in driver.find_elements_by_xpath( '//div[@class="item-content-body left"]/p[1]'): item_id = link.text item_id = item_id.replace('申请号 :', '') every_id.append(item_id)every_id 12345678#申请日every_date = []for link in driver.find_elements_by_xpath( '//div[@class="item-content-body left"]/p[2]/a'): item_date = link.text #item_id = item_id.replace('申请号 :','') every_date.append(item_date)every_date 12345678#公开号every_public_id = []for link in driver.find_elements_by_xpath( '//div[@class="item-content-body left"]/p[3]'): public_id = link.text public_id = public_id.replace('公开（公告）号 :', '') every_public_id.append(public_id)every_public_id 12345678#公开日every_public_date = []for link in driver.find_elements_by_xpath( '//div[@class="item-content-body left"]/p[4]/a'): public_date = link.text #item_id = item_id.replace('申请号 :','') every_public_date.append(public_date)every_public_date 12345678#IPC分类号every_ipc = []for link in driver.find_elements_by_xpath( '//div[@class="item-content-body left"]/p[5]'): ipc = link.text ipc = ipc.replace('\n', '').replace('IPC分类号 :', '') every_ipc.append(ipc)every_ipc 12345678#申请人every_applyer = []for link in driver.find_elements_by_xpath( '//div[@class="item-content-body left"]/p[6]'): applyer = link.text applyer = applyer.replace('\n', '').replace('申请（专利权）人 :', '') every_applyer.append(applyer)every_applyer 12345678#发明人every_creater = []for link in driver.find_elements_by_xpath( '//div[@class="item-content-body left"]/p[7]'): creater = link.text creater = creater.replace('\n', '').replace('发明人 :', '') every_creater.append(creater)every_creater 12345678#代理人every_agent = []for link in driver.find_elements_by_xpath( '//div[@class="item-content-body left"]/p[8]'): agent = link.text agent = agent.replace('\n', '').replace('代理人 :', '') every_agent.append(agent)every_agent 12345678#代理机构every_agent_group = []for link in driver.find_elements_by_xpath( '//div[@class="item-content-body left"]/p[9]'): agent_group = link.text agent_group = agent_group.replace('\n', '').replace('代理机构 :', '') every_agent_group.append(agent_group)every_agent_group 1234567891011121314151617181920212223f_title = pd.Series(every_title)f_id = pd.Series(every_id)f_date = pd.Series(every_date)f_public_id = pd.Series(every_public_id)f_public_date = pd.Series(every_public_date)f_ipc = pd.Series(every_ipc)f_applyer = pd.Series(every_applyer)f_creater = pd.Series(every_creater)f_agent = pd.Series(every_agent)f_agent_group = pd.Series(every_agent_group)info = pd.DataFrame(&#123; '专利标题': f_title, '申请号': f_id, '申请日': f_date, '公开号': f_public_id, '公开日': f_public_date, 'IPC号': f_ipc, '申请人': f_applyer, '发明人': f_creater, '代理人': f_agent, '代理机构': f_agent_group&#125;)info.to_csv('test_result.csv', index=False) 三.详览页面爬取（分步操作）1.刷新列表内容123456789101112131415161718#切换浏览器状态（爬取一次后列表信息会留存，需通过切换状态刷新）del itemwindows = driver.window_handlesdriver.switch_to.window(windows[0])status = driver.find_element_by_xpath('//a[@mode="SEARCH_MODE"]')select_status = status.get_attribute('class')if 'select' in select_status: driver.find_element_by_xpath('//a[@mode="TABLE_MODE"]').click() time.sleep(2) item = driver.find_elements_by_xpath('//a[@title="详览"]') print("列表式")else: driver.find_element_by_xpath('//a[@mode="SEARCH_MODE"]').click() time.sleep(2) item = driver.find_elements_by_xpath('//a[@role="detail"]') print('搜索式')#获取结果列表print(len(item)) 2.打开详览页面获取信息（报错重新run步骤1）123456789101112131415161718192021222324252627282930313233343536373839404142Row1 = []Row2 = []for i in range(0, len(item)): item[i].click() time.sleep(1) windows = driver.window_handles driver.switch_to.window(windows[1]) try: #element语句判断页面某元素是否加载完成 element = WebDriverWait(driver, 40).until( EC.presence_of_element_located((By.CLASS_NAME, "table-container-title"))) #获取信息 Row1.append("编号") Row1.append("专利名称") Row2.append(i) name = driver.find_element_by_xpath( '//div[@class="table-container-title"]').text Row2.append(name) rowCount = len( driver.find_elements_by_xpath( '//div[@class="table-container"]/table/tbody/tr')) for n in range(1, rowCount): row1 = (driver.find_element_by_xpath( '//div[@class="table-container"]/table/tbody/tr[%s]/td[1]' % (n)).text) row2 = (driver.find_element_by_xpath( '//div[@class="table-container"]/table/tbody/tr[%s]/td[2]' % (n)).text) Row1.append(row1) Row2.append(row2) Row1.append("摘要") zhaiyao = driver.find_element_by_xpath('//*[@class="content"]').text Row2.append(zhaiyao) Rw1 = pd.Series(Row1) Rw2 = pd.Series(Row2) total = pd.DataFrame(&#123;"属性": Rw1, "值": Rw2&#125;) finally: driver.close() print(name) driver.switch_to.window(windows[0]) time.sleep(1) 1total.to_csv('test_专利.csv',index=True,mode='w',encoding="utf-8") 3.爬取详览内容1234567891011121314151617181920windows = driver.window_handlesdriver.switch_to.window(windows[1])rowCount = len( driver.find_elements_by_xpath( '//div[@class="table-container"]/table/tbody/tr'))Row1 = []Row2 = []for i in range(1, rowCount): row1 = (driver.find_element_by_xpath( '//div[@class="table-container"]/table/tbody/tr[%s]/td[1]' % (i)).text) row2 = (driver.find_element_by_xpath( '//div[@class="table-container"]/table/tbody/tr[%s]/td[2]' % (i)).text) Row1.append(row1) Row2.append(row2)Row1.append("摘要")zhaiyao = driver.find_element_by_xpath('//*[@class="content"]').textRow2.append(zhaiyao)Rw1 = pd.Series(Row1)Rw2 = pd.Series(Row2)total = pd.DataFrame(&#123;"属性":Rw1,"值":Rw2&#125;) 4.翻页123#手动翻页driver.find_element_by_link_text('下一页').click()print("请重复1，2步操作") 详览信息获取123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263for l in range(1, 10): windows = driver.window_handles driver.switch_to.window(windows[0]) select_status = status.get_attribute('class') if 'select' in select_status: driver.find_element_by_xpath('//a[@mode="TABLE_MODE"]').click() print("列表式") else: driver.find_element_by_xpath('//a[@mode="SEARCH_MODE"]').click() print('搜索式') #获取结果列表 wait = WebDriverWait(driver, 40) button = wait.until( EC.element_to_be_clickable((By.XPATH, '//a[@role="detail"]'))) item = driver.find_elements_by_xpath('//a[@role="detail"]') print(len(item)) Row1 = [] Row2 = [] for i in range(0, len(item)): item[i].click() time.sleep(1) windows = driver.window_handles driver.switch_to.window(windows[1]) try: #element语句判断页面某元素是否加载完成 element = WebDriverWait(driver, 40).until( EC.presence_of_element_located((By.CLASS_NAME, "table-container-title"))) #获取信息 Row1.append("编号") Row1.append("专利名称") Row2.append(i) name = driver.find_element_by_xpath( '//div[@class="table-container-title"]').text Row2.append(name) rowCount = len( driver.find_elements_by_xpath( '//div[@class="table-container"]/table/tbody/tr')) for n in range(1, rowCount): row1 = (driver.find_element_by_xpath( '//div[@class="table-container"]/table/tbody/tr[%s]/td[1]' % (n)).text) row2 = (driver.find_element_by_xpath( '//div[@class="table-container"]/table/tbody/tr[%s]/td[2]' % (n)).text) Row1.append(row1) Row2.append(row2) Row1.append("摘要") zhaiyao = driver.find_element_by_xpath( '//*[@class="content"]').text Row2.append(zhaiyao) Rw1 = pd.Series(Row1) Rw2 = pd.Series(Row2) total = pd.DataFrame(&#123;"属性": Rw1, "值": Rw2&#125;) total.to_csv('test_for_10.csv', index=True) finally: driver.close() print(name) driver.switch_to.window(windows[0]) time.sleep(1) print("第" + str(l) + "页") driver.find_element_by_link_text('下一页').click() time.sleep(20) 搜索式 12 发明名称 --- 一种提高免疫力的营养保健饮料 发明名称 --- 一种健脾养元的食品组合物及其制备方法 发明名称 --- 提升人体新陈代谢进行减肥的药食同源食品及制备方法 发明名称 --- 药膳羊肚及其制备方法 发明名称 --- 一种具有温肾助阳功效的药食同源组合物及其制备方法 发明名称 --- 一种美肌嫩肤蜂王浆组合物 发明名称 --- 一种菜用黄麻泡菜茶及其制备方法 发明名称 --- 一种具有提神抗疲劳功效的蜂王浆组合物 发明名称 --- 一种含有乌梅的组合物及其制备方法和用途 发明名称 --- 一种降脂减肥的固体饮品及其制备方法 发明名称 --- 一种缓解体力疲劳的洋参阿胶糕制备方法 发明名称 --- 一种适合三高人群的玉谷康营养早餐及其制备方法 第1页 列表式 12 --------------------------------------------------------------------------- WebDriverException Traceback (most recent call last) &lt;ipython-input-20-59068cf3475d&gt; in &lt;module&gt; 18 Row2 = [] 19 for i in range(0, len(item)): ---&gt; 20 item[i].click() 21 time.sleep(1) 22 windows = driver.window_handles ~\AppData\Local\conda\conda\envs\tensorflow\lib\site-packages\selenium\webdriver\remote\webelement.py in click(self) 78 def click(self): 79 &quot;&quot;&quot;Clicks the element.&quot;&quot;&quot; ---&gt; 80 self._execute(Command.CLICK_ELEMENT) 81 82 def submit(self): ~\AppData\Local\conda\conda\envs\tensorflow\lib\site-packages\selenium\webdriver\remote\webelement.py in _execute(self, command, params) 631 params = {} 632 params[&apos;id&apos;] = self._id --&gt; 633 return self._parent.execute(command, params) 634 635 def find_element(self, by=By.ID, value=None): ~\AppData\Local\conda\conda\envs\tensorflow\lib\site-packages\selenium\webdriver\remote\webdriver.py in execute(self, driver_command, params) 319 response = self.command_executor.execute(driver_command, params) 320 if response: --&gt; 321 self.error_handler.check_response(response) 322 response[&apos;value&apos;] = self._unwrap_value( 323 response.get(&apos;value&apos;, None)) ~\AppData\Local\conda\conda\envs\tensorflow\lib\site-packages\selenium\webdriver\remote\errorhandler.py in check_response(self, response) 240 alert_text = value[&apos;alert&apos;].get(&apos;text&apos;) 241 raise exception_class(message, screen, stacktrace, alert_text) --&gt; 242 raise exception_class(message, screen, stacktrace) 243 244 def _value_or_default(self, obj, key, default): WebDriverException: Message: unknown error: Element &lt;a href=&quot;javascript:void(0);&quot; onclick=&quot;detail_single(this);&quot; role=&quot;detail&quot; title=&quot;详览&quot; class=&quot;full-text_sm in-bl&quot;&gt;&lt;/a&gt; is not clickable at point (637, 10). Other element would receive the click: &lt;div id=&quot;tool_sort&quot; class=&quot;select in-bl jq-select-container&quot; style=&quot;vertical-align: top; display: none; width: 120px; height: 30px;&quot; data-height=&quot;30&quot; data-width=&quot;120&quot; data-border=&quot;false&quot; data-handler=&quot;sort_tool_callback&quot; value=&quot;-APD&quot;&gt;...&lt;/div&gt; (Session info: chrome=72.0.3626.119) (Driver info: chromedriver=2.43.600210 (68dcf5eebde37173d4027fa8635e332711d2874a),platform=Windows NT 10.0.17763 x86_64) 详览其二1item [&lt;selenium.webdriver.remote.webelement.WebElement (session=&quot;ead56071ee2fe51b7a5fe3963e39963f&quot;, element=&quot;0.15422172092949826-211&quot;)&gt;, &lt;selenium.webdriver.remote.webelement.WebElement (session=&quot;ead56071ee2fe51b7a5fe3963e39963f&quot;, element=&quot;0.15422172092949826-212&quot;)&gt;, &lt;selenium.webdriver.remote.webelement.WebElement (session=&quot;ead56071ee2fe51b7a5fe3963e39963f&quot;, element=&quot;0.15422172092949826-213&quot;)&gt;, &lt;selenium.webdriver.remote.webelement.WebElement (session=&quot;ead56071ee2fe51b7a5fe3963e39963f&quot;, element=&quot;0.15422172092949826-214&quot;)&gt;, &lt;selenium.webdriver.remote.webelement.WebElement (session=&quot;ead56071ee2fe51b7a5fe3963e39963f&quot;, element=&quot;0.15422172092949826-215&quot;)&gt;, &lt;selenium.webdriver.remote.webelement.WebElement (session=&quot;ead56071ee2fe51b7a5fe3963e39963f&quot;, element=&quot;0.15422172092949826-216&quot;)&gt;, &lt;selenium.webdriver.remote.webelement.WebElement (session=&quot;ead56071ee2fe51b7a5fe3963e39963f&quot;, element=&quot;0.15422172092949826-217&quot;)&gt;, &lt;selenium.webdriver.remote.webelement.WebElement (session=&quot;ead56071ee2fe51b7a5fe3963e39963f&quot;, element=&quot;0.15422172092949826-218&quot;)&gt;, &lt;selenium.webdriver.remote.webelement.WebElement (session=&quot;ead56071ee2fe51b7a5fe3963e39963f&quot;, element=&quot;0.15422172092949826-219&quot;)&gt;, &lt;selenium.webdriver.remote.webelement.WebElement (session=&quot;ead56071ee2fe51b7a5fe3963e39963f&quot;, element=&quot;0.15422172092949826-220&quot;)&gt;, &lt;selenium.webdriver.remote.webelement.WebElement (session=&quot;ead56071ee2fe51b7a5fe3963e39963f&quot;, element=&quot;0.15422172092949826-221&quot;)&gt;, &lt;selenium.webdriver.remote.webelement.WebElement (session=&quot;ead56071ee2fe51b7a5fe3963e39963f&quot;, element=&quot;0.15422172092949826-222&quot;)&gt;] 12]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>博客</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2Fhm773%2F4a17b156.html</url>
    <content type="text"><![CDATA[该文章是加密文章，请输入密码访问： Incorrect Password! No content to display! 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]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>建站</tag>
        <tag>新手入门</tag>
      </tags>
  </entry>
</search>
