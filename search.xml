<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[专利数据爬取（博客测试）]]></title>
    <url>%2Fhm773%2F27633c18.html</url>
    <content type="text"><![CDATA[一.模块加载与登录检索 1234567import csvimport timeimport pandas as pdfrom selenium import webdriverfrom selenium.webdriver.common.by import Byfrom selenium.webdriver.support.ui import WebDriverWaitfrom selenium.webdriver.support import expected_conditions as EC 1234567891011121314151617181920212223242526272829303132#登陆验证driver = webdriver.Chrome()driver.get( "http://www.pss-system.gov.cn/sipopublicsearch/portal/uilogin-forwardLogin.shtml")locator = (By.LINK_TEXT, '登录')try: WebDriverWait(driver, 20, 0.5).until( EC.presence_of_element_located(locator)) name = driver.find_element_by_xpath('//input[@name="j_username"]') name.send_keys("hm773") password = driver.find_element_by_xpath('//input[@id="j_password_show"]') password.send_keys('1234567890qaz') captcha = driver.find_element_by_xpath( '//input[@name="j_validation_code"]') captcha.send_keys(input("输入验证码："))finally: driver.find_element_by_xpath('//a[@class="btn btn-login"]').click()time.sleep(2)print('验证通过，刷新页面中。。。')driver.get( 'http://www.pss-system.gov.cn/sipopublicsearch/patentsearch/tableSearch-showTableSearchIndex.shtml')time.sleep(2)#输入检索要求name = driver.find_element_by_xpath('//input[@indexcnname="IPC分类号"]')name.send_keys(input("输入检索分类号，如：A23"))summary = driver.find_element_by_xpath('//input[@indexcnname="摘要"]')summary.send_keys(input("输入检索摘要,如：药食"))driver.find_element_by_xpath('//a[@class="btn btn-search"]').click()print("请等待数据加载完成，请勿关闭打开的页面。")print("如需对搜索结果过滤请在打开的页面设定过滤条件进行过滤，不需过滤请运行下一条命令。") 输入验证码：93 验证通过，刷新页面中。。。 输入检索分类号，如：A23A23 输入检索摘要,如：药食药食 请等待数据加载完成，请勿关闭打开的页面。 如需对搜索结果过滤请在打开的页面设定过滤条件进行过滤，不需过滤请运行下一条命令。 二.字段信息爬取（需修改）1234567#专利标题every_title = []for link in driver.find_elements_by_xpath( '//div[@class="item-header clear"]/h1/div[2]/a/b'): title = link.text every_title.append(title)every_title 12345678#申请号every_id = []for link in driver.find_elements_by_xpath( '//div[@class="item-content-body left"]/p[1]'): item_id = link.text item_id = item_id.replace('申请号 :', '') every_id.append(item_id)every_id 12345678#申请日every_date = []for link in driver.find_elements_by_xpath( '//div[@class="item-content-body left"]/p[2]/a'): item_date = link.text #item_id = item_id.replace('申请号 :','') every_date.append(item_date)every_date 12345678#公开号every_public_id = []for link in driver.find_elements_by_xpath( '//div[@class="item-content-body left"]/p[3]'): public_id = link.text public_id = public_id.replace('公开（公告）号 :', '') every_public_id.append(public_id)every_public_id 12345678#公开日every_public_date = []for link in driver.find_elements_by_xpath( '//div[@class="item-content-body left"]/p[4]/a'): public_date = link.text #item_id = item_id.replace('申请号 :','') every_public_date.append(public_date)every_public_date 12345678#IPC分类号every_ipc = []for link in driver.find_elements_by_xpath( '//div[@class="item-content-body left"]/p[5]'): ipc = link.text ipc = ipc.replace('\n', '').replace('IPC分类号 :', '') every_ipc.append(ipc)every_ipc 12345678#申请人every_applyer = []for link in driver.find_elements_by_xpath( '//div[@class="item-content-body left"]/p[6]'): applyer = link.text applyer = applyer.replace('\n', '').replace('申请（专利权）人 :', '') every_applyer.append(applyer)every_applyer 12345678#发明人every_creater = []for link in driver.find_elements_by_xpath( '//div[@class="item-content-body left"]/p[7]'): creater = link.text creater = creater.replace('\n', '').replace('发明人 :', '') every_creater.append(creater)every_creater 12345678#代理人every_agent = []for link in driver.find_elements_by_xpath( '//div[@class="item-content-body left"]/p[8]'): agent = link.text agent = agent.replace('\n', '').replace('代理人 :', '') every_agent.append(agent)every_agent 12345678#代理机构every_agent_group = []for link in driver.find_elements_by_xpath( '//div[@class="item-content-body left"]/p[9]'): agent_group = link.text agent_group = agent_group.replace('\n', '').replace('代理机构 :', '') every_agent_group.append(agent_group)every_agent_group 1234567891011121314151617181920212223f_title = pd.Series(every_title)f_id = pd.Series(every_id)f_date = pd.Series(every_date)f_public_id = pd.Series(every_public_id)f_public_date = pd.Series(every_public_date)f_ipc = pd.Series(every_ipc)f_applyer = pd.Series(every_applyer)f_creater = pd.Series(every_creater)f_agent = pd.Series(every_agent)f_agent_group = pd.Series(every_agent_group)info = pd.DataFrame(&#123; '专利标题': f_title, '申请号': f_id, '申请日': f_date, '公开号': f_public_id, '公开日': f_public_date, 'IPC号': f_ipc, '申请人': f_applyer, '发明人': f_creater, '代理人': f_agent, '代理机构': f_agent_group&#125;)info.to_csv('test_result.csv', index=False) 三.详览页面爬取（分步操作）1.刷新列表内容123456789101112131415161718#切换浏览器状态（爬取一次后列表信息会留存，需通过切换状态刷新）del itemwindows = driver.window_handlesdriver.switch_to.window(windows[0])status = driver.find_element_by_xpath('//a[@mode="SEARCH_MODE"]')select_status = status.get_attribute('class')if 'select' in select_status: driver.find_element_by_xpath('//a[@mode="TABLE_MODE"]').click() time.sleep(2) item = driver.find_elements_by_xpath('//a[@title="详览"]') print("列表式")else: driver.find_element_by_xpath('//a[@mode="SEARCH_MODE"]').click() time.sleep(2) item = driver.find_elements_by_xpath('//a[@role="detail"]') print('搜索式')#获取结果列表print(len(item)) 2.打开详览页面获取信息（报错重新run步骤1）123456789101112131415161718192021222324252627282930313233343536373839404142Row1 = []Row2 = []for i in range(0, len(item)): item[i].click() time.sleep(1) windows = driver.window_handles driver.switch_to.window(windows[1]) try: #element语句判断页面某元素是否加载完成 element = WebDriverWait(driver, 40).until( EC.presence_of_element_located((By.CLASS_NAME, "table-container-title"))) #获取信息 Row1.append("编号") Row1.append("专利名称") Row2.append(i) name = driver.find_element_by_xpath( '//div[@class="table-container-title"]').text Row2.append(name) rowCount = len( driver.find_elements_by_xpath( '//div[@class="table-container"]/table/tbody/tr')) for n in range(1, rowCount): row1 = (driver.find_element_by_xpath( '//div[@class="table-container"]/table/tbody/tr[%s]/td[1]' % (n)).text) row2 = (driver.find_element_by_xpath( '//div[@class="table-container"]/table/tbody/tr[%s]/td[2]' % (n)).text) Row1.append(row1) Row2.append(row2) Row1.append("摘要") zhaiyao = driver.find_element_by_xpath('//*[@class="content"]').text Row2.append(zhaiyao) Rw1 = pd.Series(Row1) Rw2 = pd.Series(Row2) total = pd.DataFrame(&#123;"属性": Rw1, "值": Rw2&#125;) finally: driver.close() print(name) driver.switch_to.window(windows[0]) time.sleep(1) 1total.to_csv('test_专利.csv',index=True,mode='w',encoding="utf-8") 3.爬取详览内容1234567891011121314151617181920windows = driver.window_handlesdriver.switch_to.window(windows[1])rowCount = len( driver.find_elements_by_xpath( '//div[@class="table-container"]/table/tbody/tr'))Row1 = []Row2 = []for i in range(1, rowCount): row1 = (driver.find_element_by_xpath( '//div[@class="table-container"]/table/tbody/tr[%s]/td[1]' % (i)).text) row2 = (driver.find_element_by_xpath( '//div[@class="table-container"]/table/tbody/tr[%s]/td[2]' % (i)).text) Row1.append(row1) Row2.append(row2)Row1.append("摘要")zhaiyao = driver.find_element_by_xpath('//*[@class="content"]').textRow2.append(zhaiyao)Rw1 = pd.Series(Row1)Rw2 = pd.Series(Row2)total = pd.DataFrame(&#123;"属性":Rw1,"值":Rw2&#125;) 4.翻页123#手动翻页driver.find_element_by_link_text('下一页').click()print("请重复1，2步操作") 详览信息获取123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263for l in range(1, 10): windows = driver.window_handles driver.switch_to.window(windows[0]) select_status = status.get_attribute('class') if 'select' in select_status: driver.find_element_by_xpath('//a[@mode="TABLE_MODE"]').click() print("列表式") else: driver.find_element_by_xpath('//a[@mode="SEARCH_MODE"]').click() print('搜索式') #获取结果列表 wait = WebDriverWait(driver, 40) button = wait.until( EC.element_to_be_clickable((By.XPATH, '//a[@role="detail"]'))) item = driver.find_elements_by_xpath('//a[@role="detail"]') print(len(item)) Row1 = [] Row2 = [] for i in range(0, len(item)): item[i].click() time.sleep(1) windows = driver.window_handles driver.switch_to.window(windows[1]) try: #element语句判断页面某元素是否加载完成 element = WebDriverWait(driver, 40).until( EC.presence_of_element_located((By.CLASS_NAME, "table-container-title"))) #获取信息 Row1.append("编号") Row1.append("专利名称") Row2.append(i) name = driver.find_element_by_xpath( '//div[@class="table-container-title"]').text Row2.append(name) rowCount = len( driver.find_elements_by_xpath( '//div[@class="table-container"]/table/tbody/tr')) for n in range(1, rowCount): row1 = (driver.find_element_by_xpath( '//div[@class="table-container"]/table/tbody/tr[%s]/td[1]' % (n)).text) row2 = (driver.find_element_by_xpath( '//div[@class="table-container"]/table/tbody/tr[%s]/td[2]' % (n)).text) Row1.append(row1) Row2.append(row2) Row1.append("摘要") zhaiyao = driver.find_element_by_xpath( '//*[@class="content"]').text Row2.append(zhaiyao) Rw1 = pd.Series(Row1) Rw2 = pd.Series(Row2) total = pd.DataFrame(&#123;"属性": Rw1, "值": Rw2&#125;) total.to_csv('test_for_10.csv', index=True) finally: driver.close() print(name) driver.switch_to.window(windows[0]) time.sleep(1) print("第" + str(l) + "页") driver.find_element_by_link_text('下一页').click() time.sleep(20) 搜索式 12 发明名称 --- 一种提高免疫力的营养保健饮料 发明名称 --- 一种健脾养元的食品组合物及其制备方法 发明名称 --- 提升人体新陈代谢进行减肥的药食同源食品及制备方法 发明名称 --- 药膳羊肚及其制备方法 发明名称 --- 一种具有温肾助阳功效的药食同源组合物及其制备方法 发明名称 --- 一种美肌嫩肤蜂王浆组合物 发明名称 --- 一种菜用黄麻泡菜茶及其制备方法 发明名称 --- 一种具有提神抗疲劳功效的蜂王浆组合物 发明名称 --- 一种含有乌梅的组合物及其制备方法和用途 发明名称 --- 一种降脂减肥的固体饮品及其制备方法 发明名称 --- 一种缓解体力疲劳的洋参阿胶糕制备方法 发明名称 --- 一种适合三高人群的玉谷康营养早餐及其制备方法 第1页 列表式 12 --------------------------------------------------------------------------- WebDriverException Traceback (most recent call last) &lt;ipython-input-20-59068cf3475d&gt; in &lt;module&gt; 18 Row2 = [] 19 for i in range(0, len(item)): ---&gt; 20 item[i].click() 21 time.sleep(1) 22 windows = driver.window_handles ~\AppData\Local\conda\conda\envs\tensorflow\lib\site-packages\selenium\webdriver\remote\webelement.py in click(self) 78 def click(self): 79 &quot;&quot;&quot;Clicks the element.&quot;&quot;&quot; ---&gt; 80 self._execute(Command.CLICK_ELEMENT) 81 82 def submit(self): ~\AppData\Local\conda\conda\envs\tensorflow\lib\site-packages\selenium\webdriver\remote\webelement.py in _execute(self, command, params) 631 params = {} 632 params[&apos;id&apos;] = self._id --&gt; 633 return self._parent.execute(command, params) 634 635 def find_element(self, by=By.ID, value=None): ~\AppData\Local\conda\conda\envs\tensorflow\lib\site-packages\selenium\webdriver\remote\webdriver.py in execute(self, driver_command, params) 319 response = self.command_executor.execute(driver_command, params) 320 if response: --&gt; 321 self.error_handler.check_response(response) 322 response[&apos;value&apos;] = self._unwrap_value( 323 response.get(&apos;value&apos;, None)) ~\AppData\Local\conda\conda\envs\tensorflow\lib\site-packages\selenium\webdriver\remote\errorhandler.py in check_response(self, response) 240 alert_text = value[&apos;alert&apos;].get(&apos;text&apos;) 241 raise exception_class(message, screen, stacktrace, alert_text) --&gt; 242 raise exception_class(message, screen, stacktrace) 243 244 def _value_or_default(self, obj, key, default): WebDriverException: Message: unknown error: Element &lt;a href=&quot;javascript:void(0);&quot; onclick=&quot;detail_single(this);&quot; role=&quot;detail&quot; title=&quot;详览&quot; class=&quot;full-text_sm in-bl&quot;&gt;&lt;/a&gt; is not clickable at point (637, 10). Other element would receive the click: &lt;div id=&quot;tool_sort&quot; class=&quot;select in-bl jq-select-container&quot; style=&quot;vertical-align: top; display: none; width: 120px; height: 30px;&quot; data-height=&quot;30&quot; data-width=&quot;120&quot; data-border=&quot;false&quot; data-handler=&quot;sort_tool_callback&quot; value=&quot;-APD&quot;&gt;...&lt;/div&gt; (Session info: chrome=72.0.3626.119) (Driver info: chromedriver=2.43.600210 (68dcf5eebde37173d4027fa8635e332711d2874a),platform=Windows NT 10.0.17763 x86_64) 详览其二1item [&lt;selenium.webdriver.remote.webelement.WebElement (session=&quot;ead56071ee2fe51b7a5fe3963e39963f&quot;, element=&quot;0.15422172092949826-211&quot;)&gt;, &lt;selenium.webdriver.remote.webelement.WebElement (session=&quot;ead56071ee2fe51b7a5fe3963e39963f&quot;, element=&quot;0.15422172092949826-212&quot;)&gt;, &lt;selenium.webdriver.remote.webelement.WebElement (session=&quot;ead56071ee2fe51b7a5fe3963e39963f&quot;, element=&quot;0.15422172092949826-213&quot;)&gt;, &lt;selenium.webdriver.remote.webelement.WebElement (session=&quot;ead56071ee2fe51b7a5fe3963e39963f&quot;, element=&quot;0.15422172092949826-214&quot;)&gt;, &lt;selenium.webdriver.remote.webelement.WebElement (session=&quot;ead56071ee2fe51b7a5fe3963e39963f&quot;, element=&quot;0.15422172092949826-215&quot;)&gt;, &lt;selenium.webdriver.remote.webelement.WebElement (session=&quot;ead56071ee2fe51b7a5fe3963e39963f&quot;, element=&quot;0.15422172092949826-216&quot;)&gt;, &lt;selenium.webdriver.remote.webelement.WebElement (session=&quot;ead56071ee2fe51b7a5fe3963e39963f&quot;, element=&quot;0.15422172092949826-217&quot;)&gt;, &lt;selenium.webdriver.remote.webelement.WebElement (session=&quot;ead56071ee2fe51b7a5fe3963e39963f&quot;, element=&quot;0.15422172092949826-218&quot;)&gt;, &lt;selenium.webdriver.remote.webelement.WebElement (session=&quot;ead56071ee2fe51b7a5fe3963e39963f&quot;, element=&quot;0.15422172092949826-219&quot;)&gt;, &lt;selenium.webdriver.remote.webelement.WebElement (session=&quot;ead56071ee2fe51b7a5fe3963e39963f&quot;, element=&quot;0.15422172092949826-220&quot;)&gt;, &lt;selenium.webdriver.remote.webelement.WebElement (session=&quot;ead56071ee2fe51b7a5fe3963e39963f&quot;, element=&quot;0.15422172092949826-221&quot;)&gt;, &lt;selenium.webdriver.remote.webelement.WebElement (session=&quot;ead56071ee2fe51b7a5fe3963e39963f&quot;, element=&quot;0.15422172092949826-222&quot;)&gt;] 12]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>博客</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2Fhm773%2F4a17b156.html</url>
    <content type="text"><![CDATA[该文章是加密文章，请输入密码访问： Incorrect Password! No content to display! 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]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>建站</tag>
        <tag>新手入门</tag>
      </tags>
  </entry>
</search>
