<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[InterestNothing]]></title>
    <url>%2Fhm773%2Fe6ec941f.html</url>
    <content type="text"><![CDATA[脑子不好使，遇事不决全靠百度。但是有的着急用的小技巧一时半会儿度不出来就很着急了。就统一整理起来吧。随心而更，时不时进来看看说不定有新发现哦。 excel加密但是密码忘了😭 修改后缀xlsx为rar 打开压缩包，找到/xl/worksheets/选择你要破解的工作簿 以sheet1.xml为例，把sheet1.xml拖出来，记事本打开 搜索Protect，一般在最底下，拉到最下面可以直接看到 删除&lt;sheetProtection开始。。。到括号结束为止&gt;，保存。 拖为压缩包原来的位置，改回xlsx。 再次打开，就不用密码了。]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>有趣但又无用的知识</tag>
        <tag>interesting but nothing</tag>
        <tag>总而言之就是小笔记</tag>
        <tag>点进来发现没什么用系列</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[SQL入门50题]]></title>
    <url>%2Fhm773%2F8d5a8d19.html</url>
    <content type="text"><![CDATA[作为一个学习数据库的新手，SQL语言的练习是免不了的。基础入门50题练起来啊！题目的来源是CSDN的经典SQL50题，做完这些sql就入门了~,虽然可以搜到好多同样的题目，但是各自创建数据表的值不一样，我就选了这个数据量相对较多的。（而且人家标了原创了啊哈哈👍） 数据理解与创建题目所使用的数据结构基本一样的，都为学生表、课程表、教师表和成绩表。记录不同做题得出的结果也不同，该版本是有13条学生记录的版本，具体记录如下表： 学生表Student课程表Course教师表Teacher成绩表SC 学生编号SId 学生姓名Sname 出生年月Sage 学生性别Ssex 01 赵雷 1990-01-01 00:00:00 男 02 钱电 1990-12-21 00:00:00 男 03 孙风 1990-12-20 00:00:00 男 04 李云 1990-12-06 00:00:00 男 05 周梅 1991-12-01 00:00:00 女 06 吴兰 1992-01-01 00:00:00 女 07 郑竹 1989-01-01 00:00:00 女 09 张三 2017-12-20 00:00:00 女 10 李四 2017-12-25 00:00:00 女 11 李四 2012-06-06 00:00:00 女 12 赵六 2013-06-13 00:00:00 女 13 孙七 2014-06-01 00:00:00 女 课程编号CId 课程名称Cname 教师编号TId 01 语文 02 02 数学 01 03 英语 03 教师编号TId 教师姓名Tname 01 张三 02 李四 03 王五 学生编号SId 课程名称CId 成绩score 01 01 80.0 01 02 90.0 01 03 99.0 02 01 70.0 02 02 60.0 02 03 80.0 03 01 80.0 03 02 80.0 03 03 80.0 04 01 50.0 04 02 30.0 04 03 20.0 05 01 76.0 05 02 87.0 06 01 31.0 06 03 34.0 07 02 89.0 07 03 98.0 理解了大概的数据结构之后，可以开始创建数据了。以下代码无特别声明，均是在MySQL环境下运行的。 创建学生表Student12345678910111213create table Student(SId varchar(10),Sname varchar(10),Sage datetime,Ssex varchar(10));insert into Student values('01' , '赵雷' , '1990-01-01' , '男');insert into Student values('02' , '钱电' , '1990-12-21' , '男');insert into Student values('03' , '孙风' , '1990-12-20' , '男');insert into Student values('04' , '李云' , '1990-12-06' , '男');insert into Student values('05' , '周梅' , '1991-12-01' , '女');insert into Student values('06' , '吴兰' , '1992-01-01' , '女');insert into Student values('07' , '郑竹' , '1989-01-01' , '女');insert into Student values('09' , '张三' , '2017-12-20' , '女');insert into Student values('10' , '李四' , '2017-12-25' , '女');insert into Student values('11' , '李四' , '2012-06-06' , '女');insert into Student values('12' , '赵六' , '2013-06-13' , '女');insert into Student values('13' , '孙七' , '2014-06-01' , '女'); 创建课程表Course1234create table Course(CId varchar(10),Cname nvarchar(10),TId varchar(10));insert into Course values('01' , '语文' , '02');insert into Course values('02' , '数学' , '01');insert into Course values('03' , '英语' , '03'); 创建教师表Teacher1234create table Teacher(TId varchar(10),Tname varchar(10));insert into Teacher values('01' , '张三');insert into Teacher values('02' , '李四');insert into Teacher values('03' , '王五'); 创建成绩表SC12345678910111213141516171819create table SC(SId varchar(10),CId varchar(10),score decimal(18,1));insert into SC values('01' , '01' , 80);insert into SC values('01' , '02' , 90);insert into SC values('01' , '03' , 99);insert into SC values('02' , '01' , 70);insert into SC values('02' , '02' , 60);insert into SC values('02' , '03' , 80);insert into SC values('03' , '01' , 80);insert into SC values('03' , '02' , 80);insert into SC values('03' , '03' , 80);insert into SC values('04' , '01' , 50);insert into SC values('04' , '02' , 30);insert into SC values('04' , '03' , 20);insert into SC values('05' , '01' , 76);insert into SC values('05' , '02' , 87);insert into SC values('06' , '01' , 31);insert into SC values('06' , '03' , 34);insert into SC values('07' , '02' , 89);insert into SC values('07' , '03' , 98); 这样一来准备工作就完成了，接下来就是做题了。 题目练习查询”01”课程比”02”课程成绩高的学生的信息及课程分数结果: SId Sname Sag Ssex score1 score2 02 钱电 1990-12-21 00:00:00 男 70.0 60.0 04 李云 1990-12-06 00:00:00 男 50.0 30.0 执行代码:123456789101112SELECT -- 选取需要字段 student.*, s1.score AS score1, s2.score AS score2 FROM -- 来自于联表 student JOIN sc s1 ON student.SId = s1.SId AND s1.cid = '01' JOIN sc s2 ON student.SId = s2.SId AND s2.cid = '02' WHERE -- 筛选需要的 s1.score &gt; s2.score; 同时存在” 01 “课程和” 02 “课程的情况结果: SId Sname Sage Ssex CId01 CId02 01 赵雷 1990-01-01 00:00:00 男 01 02 02 钱电 1990-12-21 00:00:00 男 01 02 03 孙风 1990-12-20 00:00:00 男 01 02 04 李云 1990-12-06 00:00:00 男 01 02 05 周梅 1991-12-01 00:00:00 女 01 02 执行代码:12345678910SELECT -- 选取需要字段 student.*, s1.CId AS CId01, s2.CId AS CId02 FROM -- 来自于联表 student JOIN sc s1 ON student.SId = s1.SId AND s1.CId = '01' -- 使用and筛选 JOIN sc s2 ON student.SId = s2.SId AND s2.CId = '02'; 存在”01”课程但可能不存在”02”课程的情况(不存在时显示为 null )结果: SId Sname Sage Ssex CId01 CId02 01 赵雷 1990-01-01 00:00:00 男 01 02 02 钱电 1990-12-21 00:00:00 男 01 02 03 孙风 1990-12-20 00:00:00 男 01 02 04 李云 1990-12-06 00:00:00 男 01 02 05 周梅 1991-12-01 00:00:00 女 01 02 06 吴兰 1992-01-01 00:00:00 女 01 null 12 赵六 2013-06-13 00:00:00 女 01 null 执行代码:12345678910SELECT -- 选取需要字段 student.*, s1.CId AS CId01, s2.CId AS CId02 FROM -- 构建联表 student JOIN sc s1 ON student.SId = s1.SId AND s1.CId = '01' -- 使用and筛选 LEFT JOIN sc s2 ON student.SId = s2.SId AND s2.CId = '02'; 不存在”01”课程但存在”02“课程的情况结果: SId Sname Sage Ssex 07 郑竹 1989-01-01 00:00:00 女 执行代码:12345678910SELECT -- 选取需要字段 student.* FROM -- 来自于： sc JOIN student ON sc.SId = student.SId WHERE -- 进行筛选 sc.SId NOT IN (SELECT sc.SId FROM sc WHERE sc.CId='01') AND sc.CId='02'; 查询平均成绩大于等于 60 分的同学的学生编号和学生姓名和平均成绩结果: SId Sname avg_score 01 赵雷 89.66667 02 钱电 70.00000 03 孙风 80.00000 05 周梅 81.50000 07 郑竹 93.50000 执行代码:12345678910111213SELECT student.SId, student.Sname, avg.avg_score FROM student JOIN (SELECT SId, AVG(score) as avg_score FROM sc GROUP BY SId HAVING avg_score &gt;= 60) AS avg -- 子查询作为表进行联结 ON avg.SId = student.SId; 查询在 SC 表存在成绩的学生信息结果: SId Sname Sage Ssex 01 赵雷 1990-01-01 00:00:00 男 02 钱电 1990-12-21 00:00:00 男 03 孙风 1990-12-20 00:00:00 男 04 李云 1990-12-06 00:00:00 男 05 周梅 1991-12-01 00:00:00 女 06 吴兰 1992-01-01 00:00:00 女 07 郑竹 1989-01-01 00:00:00 女 原文章的语句是这样的： 执行代码:12SELECT distinct t.* FROM sc s ,student t where s.SId = t.SId; 具体的思路也就是找出在成绩表和学生表中都有记录的学生信息。然而我突发奇想，如果我们在成绩表sc中插入一个没有成绩的记录会怎样，即该记录不符合题目的筛选需要。如：1insert into SC values('12' , '01' , NULL); 不出意外，出现了这条记录，而我们已经知道这条记录是没有成绩的： SId Sname Sage Ssex 12 赵六 2013-06-13 00:00:00 女 在本文的原始数据集下不考虑空值是没问题的，但有时在实际运用中可能就会有空值存在。因此就要修改语句，考虑可能存在null值的情况。 执行代码:123456SELECT DISTINCT * FROM student WHERE SId in (SELECT SId FROM sc WHERE sc.score IS NOT NULL GROUP BY sid); 查询所有同学的学生编号、学生姓名、选课总数、所有课程的成绩总和结果: SId Sname c_num s_score 01 赵雷 3 269.0 02 钱电 3 210.0 03 孙风 3 240.0 04 李云 3 100.0 05 周梅 2 163.0 06 吴兰 2 65.0 07 郑竹 2 187.0 12 赵六 2 null 09 张三 0 null 10 李四 0 null 11 李四 0 null 13 孙七 0 null 执行代码:123456789SELECT stu.SId, stu.Sname, COUNT(sc.cid) AS c_num, SUM(sc.score) AS s_score FROM student AS stu LEFT JOIN sc ON stu.SId = sc.SId GROUP BY stu.SId; 要显示没选课的学生(在成绩表中无记录)，使用join结果: SId Sname Sage Ssex 09 张三 2017-12-20 00:00:00 女 10 李四 2017-12-25 00:00:00 女 11 李四 2012-06-06 00:00:00 女 13 孙七 2014-06-01 00:00:00 女 执行代码:1234567SELECT student.* FROM student WHERE SId NOT IN(SELECT sc.SId FROM sc -- 子查询选择在成绩表中有记录的学生编号 JOIN student ON student.SId =sc.SId WHERE sc.CId IS NOT NULL); 查有成绩的学生信息（同2.3？）结果: SId Sname Sage Ssex 01 赵雷 1990-01-01 00:00:00 男 02 钱电 1990-12-21 00:00:00 男 03 孙风 1990-12-20 00:00:00 男 04 李云 1990-12-06 00:00:00 男 05 周梅 1991-12-01 00:00:00 女 06 吴兰 1992-01-01 00:00:00 女 07 郑竹 1989-01-01 00:00:00 女 执行代码:1234567SELECT student.* FROM student JOIN sc ON student.SId = SC.SId WHERE sc.score IS NOT NULL GROUP BY student.SId; 查询「李」姓老师的数量结果: num 1 执行代码:123SELECT COUNT(TId) AS num FROM teacher WHERE Tname LIKE '李%'; 查询学过「张三」老师授课的同学的信息结果: SId Sname Sage Ssex 01 赵雷 1990-01-01 00:00:00 男 02 钱电 1990-12-21 00:00:00 男 03 孙风 1990-12-20 00:00:00 男 04 李云 1990-12-06 00:00:00 男 05 周梅 1991-12-01 00:00:00 女 07 郑竹 1989-01-01 00:00:00 女 执行代码:1234567SELECT DISTINCT s.* FROM student AS s INNER JOIN sc ON s.SId = sc.SId INNER JOIN course AS c ON sc.CId = c.CId INNER JOIN teacher AS t ON t.TId = c.TId WHERE t.Tname = '张三'; 查询没有学全所有课程的同学的信息结果: SId Sname Sage Ssex 05 周梅 1991-12-01 00:00:00 女 06 吴兰 1992-01-01 00:00:00 女 07 郑竹 1989-01-01 00:00:00 女 09 张三 2017-12-20 00:00:00 女 10 李四 2017-12-25 00:00:00 女 11 李四 2012-06-06 00:00:00 女 12 赵六 2013-06-13 00:00:00 女 13 孙七 2014-06-01 00:00:00 女 执行代码:12345678SELECT s.* FROM student AS s WHERE SId NOT IN( -- 取反得到没有学全所有课的学生信息 SELECT SId -- 选取学全所有课程的学生编号 FROM sc GROUP BY SId HAVING COUNT(CId) &gt;= (SELECT COUNT(CId) AS num FROM course) -- 以课程表里的课程数作为学全所有课的限定条件 ); 查询至少有一门课与学号为” 01 “的同学所学相同的同学的信息结果: SId Sname Sage Ssex 02 钱电 1990-12-21 00:00:00 男 03 孙风 1990-12-20 00:00:00 男 04 李云 1990-12-06 00:00:00 男 05 周梅 1991-12-01 00:00:00 女 06 吴兰 1992-01-01 00:00:00 女 07 郑竹 1989-01-01 00:00:00 女 12 赵六 2013-06-13 00:00:00 女 执行代码:12345678SELECT DISTINCT student.*FROM student JOIN sc ON student.SId = sc.SId AND sc.CId IN (SELECT sc.CId FROM sc WHERE sc.SId = '01') WHERE student.SId != '01'; 查询和” 01 “号的同学学习的课程完全相同的其他同学的信息结果: SId Sname Sage Ssex 课程数 02 钱电 1990-12-21 00:00:00 男 3 03 孙风 1990-12-20 00:00:00 男 3 04 李云 1990-12-06 00:00:00 男 3 执行代码:1234567891011121314SELECT DISTINCT student.*, COUNT(sc.CId) AS 课程数FROM student INNER JOIN sc ON student.SId = sc.SId AND sc.CId IN (SELECT sc.CId FROM sc WHERE sc.SId = '01') -- 保证选课在1号学生的选课单内GROUP BY student.SIdHAVING student.SId !='01' -- 把1号学生从结果踢除 AND 课程数 = (SELECT COUNT(SC.CId) FROM sc WHERE sc.SId = '01'); -- 保证选课数量与1号学生选课相同 查询没学过”张三”老师讲授的任一门课程的学生姓名结果: Sname 赵雷 钱电 孙风 李云 周梅 吴兰 郑竹 赵六 执行代码:123456789SELECT DISTINCT SnameFROM student AS s JOIN sc ON s.SId = sc.SIdWHERE sc.CId !=(SELECT CId FROM course INNER JOIN teacher ON course.TId = teacher.TId WHERE teacher.Tname="张三"); 查询两门及其以上不及格课程的同学的学号，姓名及其平均成绩结果: SId Sname 平均成绩 不及格门数 04 李云 33.33333 3 06 吴兰 32.50000 2 执行代码:1234567891011SELECT student.SId, student.Sname, AVG(sc.score) AS 平均成绩, COUNT(sc.SId) AS 不及格门数FROM sc JOIN student ON sc.SId = student.SIdWHERE sc.score &lt; 60GROUP BY sc.SIdHAVING 不及格门数 &gt;= 2; 检索” 01 “课程分数小于 60，按分数降序排列的学生信息结果: SId Sname Sage Ssex 04 李云 1990-12-06 00:00:00 男 06 吴兰 1992-01-01 00:00:00 女 执行代码:123456SELECT student.*FROM sc JOIN student ON sc.SId = student.SIdWHERE sc.CId = "01" AND sc.score &lt; 60ORDER BY sc.score DESC; 按平均成绩从高到低显示所有学生的所有课程的成绩以及平均成绩结果: SId CId score 平均分数 07 02 89.0 93.50000 07 03 98.0 93.50000 01 01 80.0 89.66667 01 02 90.0 89.66667 01 03 99.0 89.66667 05 01 76.0 81.50000 05 02 87.0 81.50000 03 01 80.0 80.00000 03 02 80.0 80.00000 03 03 80.0 80.00000 02 01 70.0 70.00000 02 02 60.0 70.00000 02 03 80.0 70.00000 04 01 50.0 33.33333 04 02 30.0 33.33333 04 03 20.0 33.33333 06 01 31.0 32.50000 06 03 34.0 32.50000 12 01 NULL NULL 12 01 NULL NULL 执行代码:123456789SELECT sc.*, avgscore.平均分数FROM sc JOIN (SELECT SId,AVG(score) AS 平均分数 FROM sc GROUP BY SId) AS avgscore ON sc.SId = avgscore.SIdORDER BY avgscore.平均分数 DESC; 查询各科成绩最高分、最低分和平均分,以如下形式显示：要求输出课程号和选修人数，查询结果按人数降序排列，若人数相同，按课程号升序排列 课程ID 课程name 课程人数 最高分 最低分 平均分 及格率 中等率 优良率 优秀率 CId Cname number max min mean &gt;=60 70-80 80-90 90-100 结果: CId Cname 课程人数 最高分 最低分 平均分 及格率 中等率 优良率 优秀率 01 语文 7 80.0 31.0 64.50000 57.14% 28.57% 28.57% 0.000% 02 数学 6 90.0 30.0 72.66667 83.33% 0.000% 50.00% 16.66% 03 英语 6 99.0 20.0 68.50000 66.66% 0.000% 33.33% 33.33% 执行代码:12345678910111213141516171819202122232425262728SELECT c.CId, c.Cname, COUNT(sc.SId) AS 课程人数, MAX(sc.score) AS 最高分, MIN(sc.score) AS 最低分, AVG(sc.score) AS 平均分, CONCAT(LEFT(COUNT(CASE -- 使用concat函数对结果格式化百分比显示 WHEN sc.score &gt;=60 THEN 1 -- 符合条件的个数/总数得到比率 ELSE NULL END)/COUNT(DISTINCT sc.SId)*100,5),"%") AS 及格率, CONCAT(LEFT(COUNT(CASE WHEN sc.score &gt;=70 AND sc.score &lt; 80 THEN 1 ELSE NULL END)/COUNT(DISTINCT sc.SId)*100,5),"%") AS 中等率, CONCAT(LEFT(COUNT(CASE WHEN sc.score &gt;=80 AND sc.score &lt; 90 THEN 1 ELSE NULL END)/COUNT(DISTINCT sc.SId)*100,5),"%") AS 优良率, CONCAT(LEFT(COUNT(CASE WHEN sc.score &gt;=90 AND sc.score &lt; 100 THEN 1 ELSE NULL END)/COUNT(DISTINCT sc.SId)*100,5),"%") AS 优秀率 FROM course AS c JOIN sc ON c.CId = sc.CId GROUP BY c.CIdORDER BY 课程人数 DESC, c.CId; 按各科成绩进行排序，并显示排名这个题目可以有四个变种，可以借助此题来理解SQL的四种排序方式。具体详细介绍可以参考Sql 四大排名函数（ROW_NUMBER、RANK、DENSE_RANK、NTILE）简介这篇文章。 显示序号按照成绩高低排名，并给每条记录生成序号。结果: 序号 SId CId score 1 01 03 99.0 2 07 03 98.0 3 01 02 90.0 4 07 02 89.0 5 05 02 87.0 6 01 01 80.0 7 02 03 80.0 8 03 01 80.0 9 03 02 80.0 10 03 03 80.0 11 05 01 76.0 12 02 01 70.0 13 02 02 60.0 14 04 01 50.0 15 06 03 34.0 16 06 01 31.0 17 04 02 30.0 18 04 03 20.0 19 12 01 NULL 执行代码:1234SELECT ROW_NUMBER() OVER(ORDER BY score DESC) AS 序号, sc.*FROM SC; 显示排名（排名重复时保留空缺）按照成绩高低排名，排名不连续。结果: 排名 SId CId score 1 01 03 99.0 2 07 03 98.0 3 01 02 90.0 4 07 02 89.0 5 05 02 87.0 6 01 01 80.0 6 02 03 80.0 6 03 01 80.0 6 03 02 80.0 6 03 03 80.0 11 05 01 76.0 12 02 01 70.0 13 02 02 60.0 14 04 01 50.0 15 06 03 34.0 16 06 01 31.0 17 04 02 30.0 18 04 03 20.0 19 12 01 NULL 执行代码:1234SELECT RANK() OVER(ORDER BY score DESC) AS 排名, sc.*FROM SC; 显示排名（排名重复时合并名次）按照成绩高低排名，排名连续不计入重复值。结果: 排名 SId CId score 1 01 03 99.0 2 07 03 98.0 3 01 02 90.0 4 07 02 89.0 5 05 02 87.0 6 01 01 80.0 6 02 03 80.0 6 03 01 80.0 6 03 02 80.0 6 03 03 80.0 7 05 01 76.0 8 02 01 70.0 9 02 02 60.0 10 04 01 50.0 11 06 03 34.0 12 06 01 31.0 13 04 02 30.0 14 04 03 20.0 15 12 01 NULL 执行代码:1234SELECT DENSE_RANK() OVER(ORDER BY score DESC) AS 排名, sc.*FROM SC; 根据排序分组（提供分组数n,如n=5）结果: 排名 SId CId score 1 01 03 99.0 1 07 03 98.0 1 01 02 90.0 1 07 02 89.0 2 05 02 87.0 2 01 01 80.0 2 02 03 80.0 2 03 01 80.0 3 03 02 80.0 3 03 03 80.0 3 05 01 76.0 3 02 01 70.0 4 02 02 60.0 4 04 01 50.0 4 06 03 34.0 4 06 01 31.0 5 04 02 30.0 5 04 03 20.0 5 12 01 NULL 执行代码:1234SELECT NTILE(5) OVER(ORDER BY score DESC) AS 排名, sc.*FROM SC; 查询学生的总成绩，并进行排名，总分重复时不保留名次空缺结果: SId Sname Sage Ssex 总成绩 排名 01 赵雷 1990-01-01 00:00:00 男 269.0 1 03 孙风 1990-12-20 00:00:00 男 240.0 2 02 钱电 1990-12-21 00:00:00 男 210.0 3 07 郑竹 1989-01-01 00:00:00 女 187.0 4 05 周梅 1991-12-01 00:00:00 女 163.0 5 04 李云 1990-12-06 00:00:00 男 100.0 6 06 吴兰 1992-01-01 00:00:00 女 65.0 7 12 赵六 2013-06-13 00:00:00 女 NULL 8 执行代码:12345678SELECT student.*, SUM(sc.score) AS 总成绩, DENSE_RANK() OVER(ORDER BY SUM(sc.score) DESC) AS 排名FROM student JOIN sc ON student.SId = sc.SIdGROUP BY student.SId; –未完待更~–]]></content>
      <categories>
        <category>DB&amp;DW</category>
        <category>数据分析</category>
      </categories>
      <tags>
        <tag>这么长的代码真的是手打的</tag>
        <tag>数据库学习中</tag>
        <tag>SQL语句并不难？</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[专利数据爬取（博客测试）]]></title>
    <url>%2Fhm773%2F27633c18.html</url>
    <content type="text"><![CDATA[模块加载与登录检索 1234567import csvimport timeimport pandas as pdfrom selenium import webdriverfrom selenium.webdriver.common.by import Byfrom selenium.webdriver.support.ui import WebDriverWaitfrom selenium.webdriver.support import expected_conditions as EC 1234567891011121314151617181920212223242526272829303132#登陆验证driver = webdriver.Chrome()driver.get( "http://www.pss-system.gov.cn/sipopublicsearch/portal/uilogin-forwardLogin.shtml")locator = (By.LINK_TEXT, '登录')try: WebDriverWait(driver, 20, 0.5).until( EC.presence_of_element_located(locator)) name = driver.find_element_by_xpath('//input[@name="j_username"]') name.send_keys("hm773") password = driver.find_element_by_xpath('//input[@id="j_password_show"]') password.send_keys('1234567890qaz') captcha = driver.find_element_by_xpath( '//input[@name="j_validation_code"]') captcha.send_keys(input("输入验证码："))finally: driver.find_element_by_xpath('//a[@class="btn btn-login"]').click()time.sleep(2)print('验证通过，刷新页面中。。。')driver.get( 'http://www.pss-system.gov.cn/sipopublicsearch/patentsearch/tableSearch-showTableSearchIndex.shtml')time.sleep(2)#输入检索要求name = driver.find_element_by_xpath('//input[@indexcnname="IPC分类号"]')name.send_keys(input("输入检索分类号，如：A23"))summary = driver.find_element_by_xpath('//input[@indexcnname="摘要"]')summary.send_keys(input("输入检索摘要,如：药食"))driver.find_element_by_xpath('//a[@class="btn btn-search"]').click()print("请等待数据加载完成，请勿关闭打开的页面。")print("如需对搜索结果过滤请在打开的页面设定过滤条件进行过滤，不需过滤请运行下一条命令。") 123456输入验证码：93验证通过，刷新页面中。。。输入检索分类号，如：A23A23输入检索摘要,如：药食药食请等待数据加载完成，请勿关闭打开的页面。如需对搜索结果过滤请在打开的页面设定过滤条件进行过滤，不需过滤请运行下一条命令。 详览页面爬取（分步操作）刷新列表内容123456789101112131415161718#切换浏览器状态（爬取一次后列表信息会留存，需通过切换状态刷新）del itemwindows = driver.window_handlesdriver.switch_to.window(windows[0])status = driver.find_element_by_xpath('//a[@mode="SEARCH_MODE"]')select_status = status.get_attribute('class')if 'select' in select_status: driver.find_element_by_xpath('//a[@mode="TABLE_MODE"]').click() time.sleep(2) item = driver.find_elements_by_xpath('//a[@title="详览"]') print("列表式")else: driver.find_element_by_xpath('//a[@mode="SEARCH_MODE"]').click() time.sleep(2) item = driver.find_elements_by_xpath('//a[@role="detail"]') print('搜索式')#获取结果列表print(len(item)) 打开详览页面获取信息（报错重新run步骤1）123456789101112131415161718192021222324252627282930313233343536373839404142Row1 = []Row2 = []for i in range(0, len(item)): item[i].click() time.sleep(1) windows = driver.window_handles driver.switch_to.window(windows[1]) try: #element语句判断页面某元素是否加载完成 element = WebDriverWait(driver, 40).until( EC.presence_of_element_located((By.CLASS_NAME, "table-container-title"))) #获取信息 Row1.append("编号") Row1.append("专利名称") Row2.append(i) name = driver.find_element_by_xpath( '//div[@class="table-container-title"]').text Row2.append(name) rowCount = len( driver.find_elements_by_xpath( '//div[@class="table-container"]/table/tbody/tr')) for n in range(1, rowCount): row1 = (driver.find_element_by_xpath( '//div[@class="table-container"]/table/tbody/tr[%s]/td[1]' % (n)).text) row2 = (driver.find_element_by_xpath( '//div[@class="table-container"]/table/tbody/tr[%s]/td[2]' % (n)).text) Row1.append(row1) Row2.append(row2) Row1.append("摘要") zhaiyao = driver.find_element_by_xpath('//*[@class="content"]').text Row2.append(zhaiyao) Rw1 = pd.Series(Row1) Rw2 = pd.Series(Row2) total = pd.DataFrame(&#123;"属性": Rw1, "值": Rw2&#125;) finally: driver.close() print(name) driver.switch_to.window(windows[0]) time.sleep(1) 1total.to_csv('test_专利.csv',index=True,mode='w',encoding="utf-8") 爬取详览内容1234567891011121314151617181920windows = driver.window_handlesdriver.switch_to.window(windows[1])rowCount = len( driver.find_elements_by_xpath( '//div[@class="table-container"]/table/tbody/tr'))Row1 = []Row2 = []for i in range(1, rowCount): row1 = (driver.find_element_by_xpath( '//div[@class="table-container"]/table/tbody/tr[%s]/td[1]' % (i)).text) row2 = (driver.find_element_by_xpath( '//div[@class="table-container"]/table/tbody/tr[%s]/td[2]' % (i)).text) Row1.append(row1) Row2.append(row2)Row1.append("摘要")zhaiyao = driver.find_element_by_xpath('//*[@class="content"]').textRow2.append(zhaiyao)Rw1 = pd.Series(Row1)Rw2 = pd.Series(Row2)total = pd.DataFrame(&#123;"属性":Rw1,"值":Rw2&#125;) 翻页123#手动翻页driver.find_element_by_link_text('下一页').click()print("请重复1，2步操作") 详览信息获取123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263for l in range(1, 10): windows = driver.window_handles driver.switch_to.window(windows[0]) select_status = status.get_attribute('class') if 'select' in select_status: driver.find_element_by_xpath('//a[@mode="TABLE_MODE"]').click() print("列表式") else: driver.find_element_by_xpath('//a[@mode="SEARCH_MODE"]').click() print('搜索式') #获取结果列表 wait = WebDriverWait(driver, 40) button = wait.until( EC.element_to_be_clickable((By.XPATH, '//a[@role="detail"]'))) item = driver.find_elements_by_xpath('//a[@role="detail"]') print(len(item)) Row1 = [] Row2 = [] for i in range(0, len(item)): item[i].click() time.sleep(1) windows = driver.window_handles driver.switch_to.window(windows[1]) try: #element语句判断页面某元素是否加载完成 element = WebDriverWait(driver, 40).until( EC.presence_of_element_located((By.CLASS_NAME, "table-container-title"))) #获取信息 Row1.append("编号") Row1.append("专利名称") Row2.append(i) name = driver.find_element_by_xpath( '//div[@class="table-container-title"]').text Row2.append(name) rowCount = len( driver.find_elements_by_xpath( '//div[@class="table-container"]/table/tbody/tr')) for n in range(1, rowCount): row1 = (driver.find_element_by_xpath( '//div[@class="table-container"]/table/tbody/tr[%s]/td[1]' % (n)).text) row2 = (driver.find_element_by_xpath( '//div[@class="table-container"]/table/tbody/tr[%s]/td[2]' % (n)).text) Row1.append(row1) Row2.append(row2) Row1.append("摘要") zhaiyao = driver.find_element_by_xpath( '//*[@class="content"]').text Row2.append(zhaiyao) Rw1 = pd.Series(Row1) Rw2 = pd.Series(Row2) total = pd.DataFrame(&#123;"属性": Rw1, "值": Rw2&#125;) total.to_csv('test_for_10.csv', index=True) finally: driver.close() print(name) driver.switch_to.window(windows[0]) time.sleep(1) print("第" + str(l) + "页") driver.find_element_by_link_text('下一页').click() time.sleep(20) 1234567891011121314151617搜索式12发明名称 --- 一种提高免疫力的营养保健饮料发明名称 --- 一种健脾养元的食品组合物及其制备方法发明名称 --- 提升人体新陈代谢进行减肥的药食同源食品及制备方法发明名称 --- 药膳羊肚及其制备方法发明名称 --- 一种具有温肾助阳功效的药食同源组合物及其制备方法发明名称 --- 一种美肌嫩肤蜂王浆组合物发明名称 --- 一种菜用黄麻泡菜茶及其制备方法发明名称 --- 一种具有提神抗疲劳功效的蜂王浆组合物发明名称 --- 一种含有乌梅的组合物及其制备方法和用途发明名称 --- 一种降脂减肥的固体饮品及其制备方法发明名称 --- 一种缓解体力疲劳的洋参阿胶糕制备方法发明名称 --- 一种适合三高人群的玉谷康营养早餐及其制备方法第1页列表式12 详览其二1item [&lt;selenium.webdriver.remote.webelement.WebElement (session=&quot;ead56071ee2fe51b7a5fe3963e39963f&quot;, element=&quot;0.15422172092949826-211&quot;)&gt;, &lt;selenium.webdriver.remote.webelement.WebElement (session=&quot;ead56071ee2fe51b7a5fe3963e39963f&quot;, element=&quot;0.15422172092949826-212&quot;)&gt;, &lt;selenium.webdriver.remote.webelement.WebElement (session=&quot;ead56071ee2fe51b7a5fe3963e39963f&quot;, element=&quot;0.15422172092949826-213&quot;)&gt;, &lt;selenium.webdriver.remote.webelement.WebElement (session=&quot;ead56071ee2fe51b7a5fe3963e39963f&quot;, element=&quot;0.15422172092949826-214&quot;)&gt;, &lt;selenium.webdriver.remote.webelement.WebElement (session=&quot;ead56071ee2fe51b7a5fe3963e39963f&quot;, element=&quot;0.15422172092949826-215&quot;)&gt;, &lt;selenium.webdriver.remote.webelement.WebElement (session=&quot;ead56071ee2fe51b7a5fe3963e39963f&quot;, element=&quot;0.15422172092949826-216&quot;)&gt;, &lt;selenium.webdriver.remote.webelement.WebElement (session=&quot;ead56071ee2fe51b7a5fe3963e39963f&quot;, element=&quot;0.15422172092949826-217&quot;)&gt;, &lt;selenium.webdriver.remote.webelement.WebElement (session=&quot;ead56071ee2fe51b7a5fe3963e39963f&quot;, element=&quot;0.15422172092949826-218&quot;)&gt;, &lt;selenium.webdriver.remote.webelement.WebElement (session=&quot;ead56071ee2fe51b7a5fe3963e39963f&quot;, element=&quot;0.15422172092949826-219&quot;)&gt;, &lt;selenium.webdriver.remote.webelement.WebElement (session=&quot;ead56071ee2fe51b7a5fe3963e39963f&quot;, element=&quot;0.15422172092949826-220&quot;)&gt;, &lt;selenium.webdriver.remote.webelement.WebElement (session=&quot;ead56071ee2fe51b7a5fe3963e39963f&quot;, element=&quot;0.15422172092949826-221&quot;)&gt;, &lt;selenium.webdriver.remote.webelement.WebElement (session=&quot;ead56071ee2fe51b7a5fe3963e39963f&quot;, element=&quot;0.15422172092949826-222&quot;)&gt;] (function(){var player = new DPlayer({"container":document.getElementById("dplayer0"),"video":{"url":"/images/桃子produce-所谓温柔.mp4"},"danmaku":{"api":"https://api.prprpr.me/dplayer/"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()]]></content>
      <categories>
        <category>博客</category>
        <category>爬虫</category>
      </categories>
      <tags>
        <tag>点进来发现没什么用系列</tag>
        <tag>爬到一半夭折了</tag>
        <tag>欢迎填坑系列</tag>
        <tag>其实还是python新手</tag>
        <tag>这么长的代码真的是手打的</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2Fhm773%2F4a17b156.html</url>
    <content type="text"><![CDATA[该文章是加密文章，请输入密码访问： Incorrect Password! No content to display! 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]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>点进来发现没什么用系列</tag>
        <tag>逃不掉的“Hello World”梗</tag>
        <tag>终于博客建好了</tag>
      </tags>
  </entry>
</search>
