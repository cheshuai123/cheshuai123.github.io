<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[专利数据爬取（博客测试）]]></title>
    <url>%2Fhm773%2F27633c18.html</url>
    <content type="text"><![CDATA[一.模块加载与登录检索 1234567import csvimport timeimport pandas as pdfrom selenium import webdriverfrom selenium.webdriver.common.by import Byfrom selenium.webdriver.support.ui import WebDriverWaitfrom selenium.webdriver.support import expected_conditions as EC 1234567891011121314151617181920212223242526272829303132#登陆验证driver = webdriver.Chrome()driver.get( "http://www.pss-system.gov.cn/sipopublicsearch/portal/uilogin-forwardLogin.shtml")locator = (By.LINK_TEXT, '登录')try: WebDriverWait(driver, 20, 0.5).until( EC.presence_of_element_located(locator)) name = driver.find_element_by_xpath('//input[@name="j_username"]') name.send_keys("hm773") password = driver.find_element_by_xpath('//input[@id="j_password_show"]') password.send_keys('1234567890qaz') captcha = driver.find_element_by_xpath( '//input[@name="j_validation_code"]') captcha.send_keys(input("输入验证码："))finally: driver.find_element_by_xpath('//a[@class="btn btn-login"]').click()time.sleep(2)print('验证通过，刷新页面中。。。')driver.get( 'http://www.pss-system.gov.cn/sipopublicsearch/patentsearch/tableSearch-showTableSearchIndex.shtml')time.sleep(2)#输入检索要求name = driver.find_element_by_xpath('//input[@indexcnname="IPC分类号"]')name.send_keys(input("输入检索分类号，如：A23"))summary = driver.find_element_by_xpath('//input[@indexcnname="摘要"]')summary.send_keys(input("输入检索摘要,如：药食"))driver.find_element_by_xpath('//a[@class="btn btn-search"]').click()print("请等待数据加载完成，请勿关闭打开的页面。")print("如需对搜索结果过滤请在打开的页面设定过滤条件进行过滤，不需过滤请运行下一条命令。") 输入验证码：93 验证通过，刷新页面中。。。 输入检索分类号，如：A23A23 输入检索摘要,如：药食药食 请等待数据加载完成，请勿关闭打开的页面。 如需对搜索结果过滤请在打开的页面设定过滤条件进行过滤，不需过滤请运行下一条命令。 二.字段信息爬取（需修改）1234567#专利标题every_title = []for link in driver.find_elements_by_xpath( '//div[@class="item-header clear"]/h1/div[2]/a/b'): title = link.text every_title.append(title)every_title 12345678#申请号every_id = []for link in driver.find_elements_by_xpath( '//div[@class="item-content-body left"]/p[1]'): item_id = link.text item_id = item_id.replace('申请号 :', '') every_id.append(item_id)every_id 12345678#申请日every_date = []for link in driver.find_elements_by_xpath( '//div[@class="item-content-body left"]/p[2]/a'): item_date = link.text #item_id = item_id.replace('申请号 :','') every_date.append(item_date)every_date 12345678#公开号every_public_id = []for link in driver.find_elements_by_xpath( '//div[@class="item-content-body left"]/p[3]'): public_id = link.text public_id = public_id.replace('公开（公告）号 :', '') every_public_id.append(public_id)every_public_id 12345678#公开日every_public_date = []for link in driver.find_elements_by_xpath( '//div[@class="item-content-body left"]/p[4]/a'): public_date = link.text #item_id = item_id.replace('申请号 :','') every_public_date.append(public_date)every_public_date 12345678#IPC分类号every_ipc = []for link in driver.find_elements_by_xpath( '//div[@class="item-content-body left"]/p[5]'): ipc = link.text ipc = ipc.replace('\n', '').replace('IPC分类号 :', '') every_ipc.append(ipc)every_ipc 12345678#申请人every_applyer = []for link in driver.find_elements_by_xpath( '//div[@class="item-content-body left"]/p[6]'): applyer = link.text applyer = applyer.replace('\n', '').replace('申请（专利权）人 :', '') every_applyer.append(applyer)every_applyer 12345678#发明人every_creater = []for link in driver.find_elements_by_xpath( '//div[@class="item-content-body left"]/p[7]'): creater = link.text creater = creater.replace('\n', '').replace('发明人 :', '') every_creater.append(creater)every_creater 12345678#代理人every_agent = []for link in driver.find_elements_by_xpath( '//div[@class="item-content-body left"]/p[8]'): agent = link.text agent = agent.replace('\n', '').replace('代理人 :', '') every_agent.append(agent)every_agent 12345678#代理机构every_agent_group = []for link in driver.find_elements_by_xpath( '//div[@class="item-content-body left"]/p[9]'): agent_group = link.text agent_group = agent_group.replace('\n', '').replace('代理机构 :', '') every_agent_group.append(agent_group)every_agent_group 1234567891011121314151617181920212223f_title = pd.Series(every_title)f_id = pd.Series(every_id)f_date = pd.Series(every_date)f_public_id = pd.Series(every_public_id)f_public_date = pd.Series(every_public_date)f_ipc = pd.Series(every_ipc)f_applyer = pd.Series(every_applyer)f_creater = pd.Series(every_creater)f_agent = pd.Series(every_agent)f_agent_group = pd.Series(every_agent_group)info = pd.DataFrame(&#123; '专利标题': f_title, '申请号': f_id, '申请日': f_date, '公开号': f_public_id, '公开日': f_public_date, 'IPC号': f_ipc, '申请人': f_applyer, '发明人': f_creater, '代理人': f_agent, '代理机构': f_agent_group&#125;)info.to_csv('test_result.csv', index=False) 三.详览页面爬取（分步操作）1.刷新列表内容123456789101112131415161718#切换浏览器状态（爬取一次后列表信息会留存，需通过切换状态刷新）del itemwindows = driver.window_handlesdriver.switch_to.window(windows[0])status = driver.find_element_by_xpath('//a[@mode="SEARCH_MODE"]')select_status = status.get_attribute('class')if 'select' in select_status: driver.find_element_by_xpath('//a[@mode="TABLE_MODE"]').click() time.sleep(2) item = driver.find_elements_by_xpath('//a[@title="详览"]') print("列表式")else: driver.find_element_by_xpath('//a[@mode="SEARCH_MODE"]').click() time.sleep(2) item = driver.find_elements_by_xpath('//a[@role="detail"]') print('搜索式')#获取结果列表print(len(item)) 2.打开详览页面获取信息（报错重新run步骤1）123456789101112131415161718192021222324252627282930313233343536373839404142Row1 = []Row2 = []for i in range(0, len(item)): item[i].click() time.sleep(1) windows = driver.window_handles driver.switch_to.window(windows[1]) try: #element语句判断页面某元素是否加载完成 element = WebDriverWait(driver, 40).until( EC.presence_of_element_located((By.CLASS_NAME, "table-container-title"))) #获取信息 Row1.append("编号") Row1.append("专利名称") Row2.append(i) name = driver.find_element_by_xpath( '//div[@class="table-container-title"]').text Row2.append(name) rowCount = len( driver.find_elements_by_xpath( '//div[@class="table-container"]/table/tbody/tr')) for n in range(1, rowCount): row1 = (driver.find_element_by_xpath( '//div[@class="table-container"]/table/tbody/tr[%s]/td[1]' % (n)).text) row2 = (driver.find_element_by_xpath( '//div[@class="table-container"]/table/tbody/tr[%s]/td[2]' % (n)).text) Row1.append(row1) Row2.append(row2) Row1.append("摘要") zhaiyao = driver.find_element_by_xpath('//*[@class="content"]').text Row2.append(zhaiyao) Rw1 = pd.Series(Row1) Rw2 = pd.Series(Row2) total = pd.DataFrame(&#123;"属性": Rw1, "值": Rw2&#125;) finally: driver.close() print(name) driver.switch_to.window(windows[0]) time.sleep(1) 1total.to_csv('test_专利.csv',index=True,mode='w',encoding="utf-8") 3.爬取详览内容1234567891011121314151617181920windows = driver.window_handlesdriver.switch_to.window(windows[1])rowCount = len( driver.find_elements_by_xpath( '//div[@class="table-container"]/table/tbody/tr'))Row1 = []Row2 = []for i in range(1, rowCount): row1 = (driver.find_element_by_xpath( '//div[@class="table-container"]/table/tbody/tr[%s]/td[1]' % (i)).text) row2 = (driver.find_element_by_xpath( '//div[@class="table-container"]/table/tbody/tr[%s]/td[2]' % (i)).text) Row1.append(row1) Row2.append(row2)Row1.append("摘要")zhaiyao = driver.find_element_by_xpath('//*[@class="content"]').textRow2.append(zhaiyao)Rw1 = pd.Series(Row1)Rw2 = pd.Series(Row2)total = pd.DataFrame(&#123;"属性":Rw1,"值":Rw2&#125;) 4.翻页123#手动翻页driver.find_element_by_link_text('下一页').click()print("请重复1，2步操作") 详览信息获取123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263for l in range(1, 10): windows = driver.window_handles driver.switch_to.window(windows[0]) select_status = status.get_attribute('class') if 'select' in select_status: driver.find_element_by_xpath('//a[@mode="TABLE_MODE"]').click() print("列表式") else: driver.find_element_by_xpath('//a[@mode="SEARCH_MODE"]').click() print('搜索式') #获取结果列表 wait = WebDriverWait(driver, 40) button = wait.until( EC.element_to_be_clickable((By.XPATH, '//a[@role="detail"]'))) item = driver.find_elements_by_xpath('//a[@role="detail"]') print(len(item)) Row1 = [] Row2 = [] for i in range(0, len(item)): item[i].click() time.sleep(1) windows = driver.window_handles driver.switch_to.window(windows[1]) try: #element语句判断页面某元素是否加载完成 element = WebDriverWait(driver, 40).until( EC.presence_of_element_located((By.CLASS_NAME, "table-container-title"))) #获取信息 Row1.append("编号") Row1.append("专利名称") Row2.append(i) name = driver.find_element_by_xpath( '//div[@class="table-container-title"]').text Row2.append(name) rowCount = len( driver.find_elements_by_xpath( '//div[@class="table-container"]/table/tbody/tr')) for n in range(1, rowCount): row1 = (driver.find_element_by_xpath( '//div[@class="table-container"]/table/tbody/tr[%s]/td[1]' % (n)).text) row2 = (driver.find_element_by_xpath( '//div[@class="table-container"]/table/tbody/tr[%s]/td[2]' % (n)).text) Row1.append(row1) Row2.append(row2) Row1.append("摘要") zhaiyao = driver.find_element_by_xpath( '//*[@class="content"]').text Row2.append(zhaiyao) Rw1 = pd.Series(Row1) Rw2 = pd.Series(Row2) total = pd.DataFrame(&#123;"属性": Rw1, "值": Rw2&#125;) total.to_csv('test_for_10.csv', index=True) finally: driver.close() print(name) driver.switch_to.window(windows[0]) time.sleep(1) print("第" + str(l) + "页") driver.find_element_by_link_text('下一页').click() time.sleep(20) 搜索式 12 发明名称 --- 一种提高免疫力的营养保健饮料 发明名称 --- 一种健脾养元的食品组合物及其制备方法 发明名称 --- 提升人体新陈代谢进行减肥的药食同源食品及制备方法 发明名称 --- 药膳羊肚及其制备方法 发明名称 --- 一种具有温肾助阳功效的药食同源组合物及其制备方法 发明名称 --- 一种美肌嫩肤蜂王浆组合物 发明名称 --- 一种菜用黄麻泡菜茶及其制备方法 发明名称 --- 一种具有提神抗疲劳功效的蜂王浆组合物 发明名称 --- 一种含有乌梅的组合物及其制备方法和用途 发明名称 --- 一种降脂减肥的固体饮品及其制备方法 发明名称 --- 一种缓解体力疲劳的洋参阿胶糕制备方法 发明名称 --- 一种适合三高人群的玉谷康营养早餐及其制备方法 第1页 列表式 12 --------------------------------------------------------------------------- WebDriverException Traceback (most recent call last) &lt;ipython-input-20-59068cf3475d&gt; in &lt;module&gt; 18 Row2 = [] 19 for i in range(0, len(item)): ---&gt; 20 item[i].click() 21 time.sleep(1) 22 windows = driver.window_handles ~\AppData\Local\conda\conda\envs\tensorflow\lib\site-packages\selenium\webdriver\remote\webelement.py in click(self) 78 def click(self): 79 &quot;&quot;&quot;Clicks the element.&quot;&quot;&quot; ---&gt; 80 self._execute(Command.CLICK_ELEMENT) 81 82 def submit(self): ~\AppData\Local\conda\conda\envs\tensorflow\lib\site-packages\selenium\webdriver\remote\webelement.py in _execute(self, command, params) 631 params = {} 632 params[&apos;id&apos;] = self._id --&gt; 633 return self._parent.execute(command, params) 634 635 def find_element(self, by=By.ID, value=None): ~\AppData\Local\conda\conda\envs\tensorflow\lib\site-packages\selenium\webdriver\remote\webdriver.py in execute(self, driver_command, params) 319 response = self.command_executor.execute(driver_command, params) 320 if response: --&gt; 321 self.error_handler.check_response(response) 322 response[&apos;value&apos;] = self._unwrap_value( 323 response.get(&apos;value&apos;, None)) ~\AppData\Local\conda\conda\envs\tensorflow\lib\site-packages\selenium\webdriver\remote\errorhandler.py in check_response(self, response) 240 alert_text = value[&apos;alert&apos;].get(&apos;text&apos;) 241 raise exception_class(message, screen, stacktrace, alert_text) --&gt; 242 raise exception_class(message, screen, stacktrace) 243 244 def _value_or_default(self, obj, key, default): WebDriverException: Message: unknown error: Element &lt;a href=&quot;javascript:void(0);&quot; onclick=&quot;detail_single(this);&quot; role=&quot;detail&quot; title=&quot;详览&quot; class=&quot;full-text_sm in-bl&quot;&gt;&lt;/a&gt; is not clickable at point (637, 10). Other element would receive the click: &lt;div id=&quot;tool_sort&quot; class=&quot;select in-bl jq-select-container&quot; style=&quot;vertical-align: top; display: none; width: 120px; height: 30px;&quot; data-height=&quot;30&quot; data-width=&quot;120&quot; data-border=&quot;false&quot; data-handler=&quot;sort_tool_callback&quot; value=&quot;-APD&quot;&gt;...&lt;/div&gt; (Session info: chrome=72.0.3626.119) (Driver info: chromedriver=2.43.600210 (68dcf5eebde37173d4027fa8635e332711d2874a),platform=Windows NT 10.0.17763 x86_64) 详览其二1item [&lt;selenium.webdriver.remote.webelement.WebElement (session=&quot;ead56071ee2fe51b7a5fe3963e39963f&quot;, element=&quot;0.15422172092949826-211&quot;)&gt;, &lt;selenium.webdriver.remote.webelement.WebElement (session=&quot;ead56071ee2fe51b7a5fe3963e39963f&quot;, element=&quot;0.15422172092949826-212&quot;)&gt;, &lt;selenium.webdriver.remote.webelement.WebElement (session=&quot;ead56071ee2fe51b7a5fe3963e39963f&quot;, element=&quot;0.15422172092949826-213&quot;)&gt;, &lt;selenium.webdriver.remote.webelement.WebElement (session=&quot;ead56071ee2fe51b7a5fe3963e39963f&quot;, element=&quot;0.15422172092949826-214&quot;)&gt;, &lt;selenium.webdriver.remote.webelement.WebElement (session=&quot;ead56071ee2fe51b7a5fe3963e39963f&quot;, element=&quot;0.15422172092949826-215&quot;)&gt;, &lt;selenium.webdriver.remote.webelement.WebElement (session=&quot;ead56071ee2fe51b7a5fe3963e39963f&quot;, element=&quot;0.15422172092949826-216&quot;)&gt;, &lt;selenium.webdriver.remote.webelement.WebElement (session=&quot;ead56071ee2fe51b7a5fe3963e39963f&quot;, element=&quot;0.15422172092949826-217&quot;)&gt;, &lt;selenium.webdriver.remote.webelement.WebElement (session=&quot;ead56071ee2fe51b7a5fe3963e39963f&quot;, element=&quot;0.15422172092949826-218&quot;)&gt;, &lt;selenium.webdriver.remote.webelement.WebElement (session=&quot;ead56071ee2fe51b7a5fe3963e39963f&quot;, element=&quot;0.15422172092949826-219&quot;)&gt;, &lt;selenium.webdriver.remote.webelement.WebElement (session=&quot;ead56071ee2fe51b7a5fe3963e39963f&quot;, element=&quot;0.15422172092949826-220&quot;)&gt;, &lt;selenium.webdriver.remote.webelement.WebElement (session=&quot;ead56071ee2fe51b7a5fe3963e39963f&quot;, element=&quot;0.15422172092949826-221&quot;)&gt;, &lt;selenium.webdriver.remote.webelement.WebElement (session=&quot;ead56071ee2fe51b7a5fe3963e39963f&quot;, element=&quot;0.15422172092949826-222&quot;)&gt;] 12]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>博客</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2Fhm773%2F4a17b156.html</url>
    <content type="text"><![CDATA[该文章是加密文章，请输入密码访问： Incorrect Password! No content to display! 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]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>建站</tag>
        <tag>新手入门</tag>
      </tags>
  </entry>
</search>
