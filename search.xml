<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[专利数据爬取（博客测试）]]></title>
    <url>%2Fhm773%2F27633c18.html</url>
    <content type="text"><![CDATA[一.模块加载与登录检索 1234567import csvimport timeimport pandas as pdfrom selenium import webdriverfrom selenium.webdriver.common.by import Byfrom selenium.webdriver.support.ui import WebDriverWaitfrom selenium.webdriver.support import expected_conditions as EC 1234567891011121314151617181920212223242526272829303132#登陆验证driver = webdriver.Chrome()driver.get( "http://www.pss-system.gov.cn/sipopublicsearch/portal/uilogin-forwardLogin.shtml")locator = (By.LINK_TEXT, '登录')try: WebDriverWait(driver, 20, 0.5).until( EC.presence_of_element_located(locator)) name = driver.find_element_by_xpath('//input[@name="j_username"]') name.send_keys("hm773") password = driver.find_element_by_xpath('//input[@id="j_password_show"]') password.send_keys('1234567890qaz') captcha = driver.find_element_by_xpath( '//input[@name="j_validation_code"]') captcha.send_keys(input("输入验证码："))finally: driver.find_element_by_xpath('//a[@class="btn btn-login"]').click()time.sleep(2)print('验证通过，刷新页面中。。。')driver.get( 'http://www.pss-system.gov.cn/sipopublicsearch/patentsearch/tableSearch-showTableSearchIndex.shtml')time.sleep(2)#输入检索要求name = driver.find_element_by_xpath('//input[@indexcnname="IPC分类号"]')name.send_keys(input("输入检索分类号，如：A23"))summary = driver.find_element_by_xpath('//input[@indexcnname="摘要"]')summary.send_keys(input("输入检索摘要,如：药食"))driver.find_element_by_xpath('//a[@class="btn btn-search"]').click()print("请等待数据加载完成，请勿关闭打开的页面。")print("如需对搜索结果过滤请在打开的页面设定过滤条件进行过滤，不需过滤请运行下一条命令。") 输入验证码：93 验证通过，刷新页面中。。。 输入检索分类号，如：A23A23 输入检索摘要,如：药食药食 请等待数据加载完成，请勿关闭打开的页面。 如需对搜索结果过滤请在打开的页面设定过滤条件进行过滤，不需过滤请运行下一条命令。 二.字段信息爬取（需修改）1234567#专利标题every_title = []for link in driver.find_elements_by_xpath( '//div[@class="item-header clear"]/h1/div[2]/a/b'): title = link.text every_title.append(title)every_title 12345678#申请号every_id = []for link in driver.find_elements_by_xpath( '//div[@class="item-content-body left"]/p[1]'): item_id = link.text item_id = item_id.replace('申请号 :', '') every_id.append(item_id)every_id 12345678#申请日every_date = []for link in driver.find_elements_by_xpath( '//div[@class="item-content-body left"]/p[2]/a'): item_date = link.text #item_id = item_id.replace('申请号 :','') every_date.append(item_date)every_date 12345678#公开号every_public_id = []for link in driver.find_elements_by_xpath( '//div[@class="item-content-body left"]/p[3]'): public_id = link.text public_id = public_id.replace('公开（公告）号 :', '') every_public_id.append(public_id)every_public_id 12345678#公开日every_public_date = []for link in driver.find_elements_by_xpath( '//div[@class="item-content-body left"]/p[4]/a'): public_date = link.text #item_id = item_id.replace('申请号 :','') every_public_date.append(public_date)every_public_date 12345678#IPC分类号every_ipc = []for link in driver.find_elements_by_xpath( '//div[@class="item-content-body left"]/p[5]'): ipc = link.text ipc = ipc.replace('\n', '').replace('IPC分类号 :', '') every_ipc.append(ipc)every_ipc 12345678#申请人every_applyer = []for link in driver.find_elements_by_xpath( '//div[@class="item-content-body left"]/p[6]'): applyer = link.text applyer = applyer.replace('\n', '').replace('申请（专利权）人 :', '') every_applyer.append(applyer)every_applyer 12345678#发明人every_creater = []for link in driver.find_elements_by_xpath( '//div[@class="item-content-body left"]/p[7]'): creater = link.text creater = creater.replace('\n', '').replace('发明人 :', '') every_creater.append(creater)every_creater 12345678#代理人every_agent = []for link in driver.find_elements_by_xpath( '//div[@class="item-content-body left"]/p[8]'): agent = link.text agent = agent.replace('\n', '').replace('代理人 :', '') every_agent.append(agent)every_agent 12345678#代理机构every_agent_group = []for link in driver.find_elements_by_xpath( '//div[@class="item-content-body left"]/p[9]'): agent_group = link.text agent_group = agent_group.replace('\n', '').replace('代理机构 :', '') every_agent_group.append(agent_group)every_agent_group 1234567891011121314151617181920212223f_title = pd.Series(every_title)f_id = pd.Series(every_id)f_date = pd.Series(every_date)f_public_id = pd.Series(every_public_id)f_public_date = pd.Series(every_public_date)f_ipc = pd.Series(every_ipc)f_applyer = pd.Series(every_applyer)f_creater = pd.Series(every_creater)f_agent = pd.Series(every_agent)f_agent_group = pd.Series(every_agent_group)info = pd.DataFrame(&#123; '专利标题': f_title, '申请号': f_id, '申请日': f_date, '公开号': f_public_id, '公开日': f_public_date, 'IPC号': f_ipc, '申请人': f_applyer, '发明人': f_creater, '代理人': f_agent, '代理机构': f_agent_group&#125;)info.to_csv('test_result.csv', index=False) 三.详览页面爬取（分步操作）1.刷新列表内容123456789101112131415161718#切换浏览器状态（爬取一次后列表信息会留存，需通过切换状态刷新）del itemwindows = driver.window_handlesdriver.switch_to.window(windows[0])status = driver.find_element_by_xpath('//a[@mode="SEARCH_MODE"]')select_status = status.get_attribute('class')if 'select' in select_status: driver.find_element_by_xpath('//a[@mode="TABLE_MODE"]').click() time.sleep(2) item = driver.find_elements_by_xpath('//a[@title="详览"]') print("列表式")else: driver.find_element_by_xpath('//a[@mode="SEARCH_MODE"]').click() time.sleep(2) item = driver.find_elements_by_xpath('//a[@role="detail"]') print('搜索式')#获取结果列表print(len(item)) 2.打开详览页面获取信息（报错重新run步骤1）123456789101112131415161718192021222324252627282930313233343536373839404142Row1 = []Row2 = []for i in range(0, len(item)): item[i].click() time.sleep(1) windows = driver.window_handles driver.switch_to.window(windows[1]) try: #element语句判断页面某元素是否加载完成 element = WebDriverWait(driver, 40).until( EC.presence_of_element_located((By.CLASS_NAME, "table-container-title"))) #获取信息 Row1.append("编号") Row1.append("专利名称") Row2.append(i) name = driver.find_element_by_xpath( '//div[@class="table-container-title"]').text Row2.append(name) rowCount = len( driver.find_elements_by_xpath( '//div[@class="table-container"]/table/tbody/tr')) for n in range(1, rowCount): row1 = (driver.find_element_by_xpath( '//div[@class="table-container"]/table/tbody/tr[%s]/td[1]' % (n)).text) row2 = (driver.find_element_by_xpath( '//div[@class="table-container"]/table/tbody/tr[%s]/td[2]' % (n)).text) Row1.append(row1) Row2.append(row2) Row1.append("摘要") zhaiyao = driver.find_element_by_xpath('//*[@class="content"]').text Row2.append(zhaiyao) Rw1 = pd.Series(Row1) Rw2 = pd.Series(Row2) total = pd.DataFrame(&#123;"属性": Rw1, "值": Rw2&#125;) finally: driver.close() print(name) driver.switch_to.window(windows[0]) time.sleep(1) 1total.to_csv('test_专利.csv',index=True,mode='w',encoding="utf-8") 3.爬取详览内容1234567891011121314151617181920windows = driver.window_handlesdriver.switch_to.window(windows[1])rowCount = len( driver.find_elements_by_xpath( '//div[@class="table-container"]/table/tbody/tr'))Row1 = []Row2 = []for i in range(1, rowCount): row1 = (driver.find_element_by_xpath( '//div[@class="table-container"]/table/tbody/tr[%s]/td[1]' % (i)).text) row2 = (driver.find_element_by_xpath( '//div[@class="table-container"]/table/tbody/tr[%s]/td[2]' % (i)).text) Row1.append(row1) Row2.append(row2)Row1.append("摘要")zhaiyao = driver.find_element_by_xpath('//*[@class="content"]').textRow2.append(zhaiyao)Rw1 = pd.Series(Row1)Rw2 = pd.Series(Row2)total = pd.DataFrame(&#123;"属性":Rw1,"值":Rw2&#125;) 4.翻页123#手动翻页driver.find_element_by_link_text('下一页').click()print("请重复1，2步操作") 详览信息获取123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263for l in range(1, 10): windows = driver.window_handles driver.switch_to.window(windows[0]) select_status = status.get_attribute('class') if 'select' in select_status: driver.find_element_by_xpath('//a[@mode="TABLE_MODE"]').click() print("列表式") else: driver.find_element_by_xpath('//a[@mode="SEARCH_MODE"]').click() print('搜索式') #获取结果列表 wait = WebDriverWait(driver, 40) button = wait.until( EC.element_to_be_clickable((By.XPATH, '//a[@role="detail"]'))) item = driver.find_elements_by_xpath('//a[@role="detail"]') print(len(item)) Row1 = [] Row2 = [] for i in range(0, len(item)): item[i].click() time.sleep(1) windows = driver.window_handles driver.switch_to.window(windows[1]) try: #element语句判断页面某元素是否加载完成 element = WebDriverWait(driver, 40).until( EC.presence_of_element_located((By.CLASS_NAME, "table-container-title"))) #获取信息 Row1.append("编号") Row1.append("专利名称") Row2.append(i) name = driver.find_element_by_xpath( '//div[@class="table-container-title"]').text Row2.append(name) rowCount = len( driver.find_elements_by_xpath( '//div[@class="table-container"]/table/tbody/tr')) for n in range(1, rowCount): row1 = (driver.find_element_by_xpath( '//div[@class="table-container"]/table/tbody/tr[%s]/td[1]' % (n)).text) row2 = (driver.find_element_by_xpath( '//div[@class="table-container"]/table/tbody/tr[%s]/td[2]' % (n)).text) Row1.append(row1) Row2.append(row2) Row1.append("摘要") zhaiyao = driver.find_element_by_xpath( '//*[@class="content"]').text Row2.append(zhaiyao) Rw1 = pd.Series(Row1) Rw2 = pd.Series(Row2) total = pd.DataFrame(&#123;"属性": Rw1, "值": Rw2&#125;) total.to_csv('test_for_10.csv', index=True) finally: driver.close() print(name) driver.switch_to.window(windows[0]) time.sleep(1) print("第" + str(l) + "页") driver.find_element_by_link_text('下一页').click() time.sleep(20) 搜索式 12 发明名称 --- 一种提高免疫力的营养保健饮料 发明名称 --- 一种健脾养元的食品组合物及其制备方法 发明名称 --- 提升人体新陈代谢进行减肥的药食同源食品及制备方法 发明名称 --- 药膳羊肚及其制备方法 发明名称 --- 一种具有温肾助阳功效的药食同源组合物及其制备方法 发明名称 --- 一种美肌嫩肤蜂王浆组合物 发明名称 --- 一种菜用黄麻泡菜茶及其制备方法 发明名称 --- 一种具有提神抗疲劳功效的蜂王浆组合物 发明名称 --- 一种含有乌梅的组合物及其制备方法和用途 发明名称 --- 一种降脂减肥的固体饮品及其制备方法 发明名称 --- 一种缓解体力疲劳的洋参阿胶糕制备方法 发明名称 --- 一种适合三高人群的玉谷康营养早餐及其制备方法 第1页 列表式 12 --------------------------------------------------------------------------- WebDriverException Traceback (most recent call last) &lt;ipython-input-20-59068cf3475d&gt; in &lt;module&gt; 18 Row2 = [] 19 for i in range(0, len(item)): ---&gt; 20 item[i].click() 21 time.sleep(1) 22 windows = driver.window_handles ~\AppData\Local\conda\conda\envs\tensorflow\lib\site-packages\selenium\webdriver\remote\webelement.py in click(self) 78 def click(self): 79 &quot;&quot;&quot;Clicks the element.&quot;&quot;&quot; ---&gt; 80 self._execute(Command.CLICK_ELEMENT) 81 82 def submit(self): ~\AppData\Local\conda\conda\envs\tensorflow\lib\site-packages\selenium\webdriver\remote\webelement.py in _execute(self, command, params) 631 params = {} 632 params[&apos;id&apos;] = self._id --&gt; 633 return self._parent.execute(command, params) 634 635 def find_element(self, by=By.ID, value=None): ~\AppData\Local\conda\conda\envs\tensorflow\lib\site-packages\selenium\webdriver\remote\webdriver.py in execute(self, driver_command, params) 319 response = self.command_executor.execute(driver_command, params) 320 if response: --&gt; 321 self.error_handler.check_response(response) 322 response[&apos;value&apos;] = self._unwrap_value( 323 response.get(&apos;value&apos;, None)) ~\AppData\Local\conda\conda\envs\tensorflow\lib\site-packages\selenium\webdriver\remote\errorhandler.py in check_response(self, response) 240 alert_text = value[&apos;alert&apos;].get(&apos;text&apos;) 241 raise exception_class(message, screen, stacktrace, alert_text) --&gt; 242 raise exception_class(message, screen, stacktrace) 243 244 def _value_or_default(self, obj, key, default): WebDriverException: Message: unknown error: Element &lt;a href=&quot;javascript:void(0);&quot; onclick=&quot;detail_single(this);&quot; role=&quot;detail&quot; title=&quot;详览&quot; class=&quot;full-text_sm in-bl&quot;&gt;&lt;/a&gt; is not clickable at point (637, 10). Other element would receive the click: &lt;div id=&quot;tool_sort&quot; class=&quot;select in-bl jq-select-container&quot; style=&quot;vertical-align: top; display: none; width: 120px; height: 30px;&quot; data-height=&quot;30&quot; data-width=&quot;120&quot; data-border=&quot;false&quot; data-handler=&quot;sort_tool_callback&quot; value=&quot;-APD&quot;&gt;...&lt;/div&gt; (Session info: chrome=72.0.3626.119) (Driver info: chromedriver=2.43.600210 (68dcf5eebde37173d4027fa8635e332711d2874a),platform=Windows NT 10.0.17763 x86_64) 详览其二1item [&lt;selenium.webdriver.remote.webelement.WebElement (session=&quot;ead56071ee2fe51b7a5fe3963e39963f&quot;, element=&quot;0.15422172092949826-211&quot;)&gt;, &lt;selenium.webdriver.remote.webelement.WebElement (session=&quot;ead56071ee2fe51b7a5fe3963e39963f&quot;, element=&quot;0.15422172092949826-212&quot;)&gt;, &lt;selenium.webdriver.remote.webelement.WebElement (session=&quot;ead56071ee2fe51b7a5fe3963e39963f&quot;, element=&quot;0.15422172092949826-213&quot;)&gt;, &lt;selenium.webdriver.remote.webelement.WebElement (session=&quot;ead56071ee2fe51b7a5fe3963e39963f&quot;, element=&quot;0.15422172092949826-214&quot;)&gt;, &lt;selenium.webdriver.remote.webelement.WebElement (session=&quot;ead56071ee2fe51b7a5fe3963e39963f&quot;, element=&quot;0.15422172092949826-215&quot;)&gt;, &lt;selenium.webdriver.remote.webelement.WebElement (session=&quot;ead56071ee2fe51b7a5fe3963e39963f&quot;, element=&quot;0.15422172092949826-216&quot;)&gt;, &lt;selenium.webdriver.remote.webelement.WebElement (session=&quot;ead56071ee2fe51b7a5fe3963e39963f&quot;, element=&quot;0.15422172092949826-217&quot;)&gt;, &lt;selenium.webdriver.remote.webelement.WebElement (session=&quot;ead56071ee2fe51b7a5fe3963e39963f&quot;, element=&quot;0.15422172092949826-218&quot;)&gt;, &lt;selenium.webdriver.remote.webelement.WebElement (session=&quot;ead56071ee2fe51b7a5fe3963e39963f&quot;, element=&quot;0.15422172092949826-219&quot;)&gt;, &lt;selenium.webdriver.remote.webelement.WebElement (session=&quot;ead56071ee2fe51b7a5fe3963e39963f&quot;, element=&quot;0.15422172092949826-220&quot;)&gt;, &lt;selenium.webdriver.remote.webelement.WebElement (session=&quot;ead56071ee2fe51b7a5fe3963e39963f&quot;, element=&quot;0.15422172092949826-221&quot;)&gt;, &lt;selenium.webdriver.remote.webelement.WebElement (session=&quot;ead56071ee2fe51b7a5fe3963e39963f&quot;, element=&quot;0.15422172092949826-222&quot;)&gt;] 12]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>博客</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2Fhm773%2F4a17b156.html</url>
    <content type="text"><![CDATA[该文章是加密文章，请输入密码访问： Incorrect Password! No content to display! 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]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>建站</tag>
        <tag>新手入门</tag>
      </tags>
  </entry>
</search>
