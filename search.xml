<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[专利数据爬取（博客测试）]]></title>
    <url>%2Fhm773%2F27633c18.html</url>
    <content type="text"><![CDATA[一.模块加载与登录检索 1234567import csvimport timeimport pandas as pdfrom selenium import webdriverfrom selenium.webdriver.common.by import Byfrom selenium.webdriver.support.ui import WebDriverWaitfrom selenium.webdriver.support import expected_conditions as EC 1234567891011121314151617181920212223242526272829303132#登陆验证driver = webdriver.Chrome()driver.get( "http://www.pss-system.gov.cn/sipopublicsearch/portal/uilogin-forwardLogin.shtml")locator = (By.LINK_TEXT, '登录')try: WebDriverWait(driver, 20, 0.5).until( EC.presence_of_element_located(locator)) name = driver.find_element_by_xpath('//input[@name="j_username"]') name.send_keys("hm773") password = driver.find_element_by_xpath('//input[@id="j_password_show"]') password.send_keys('1234567890qaz') captcha = driver.find_element_by_xpath( '//input[@name="j_validation_code"]') captcha.send_keys(input("输入验证码："))finally: driver.find_element_by_xpath('//a[@class="btn btn-login"]').click()time.sleep(2)print('验证通过，刷新页面中。。。')driver.get( 'http://www.pss-system.gov.cn/sipopublicsearch/patentsearch/tableSearch-showTableSearchIndex.shtml')time.sleep(2)#输入检索要求name = driver.find_element_by_xpath('//input[@indexcnname="IPC分类号"]')name.send_keys(input("输入检索分类号，如：A23"))summary = driver.find_element_by_xpath('//input[@indexcnname="摘要"]')summary.send_keys(input("输入检索摘要,如：药食"))driver.find_element_by_xpath('//a[@class="btn btn-search"]').click()print("请等待数据加载完成，请勿关闭打开的页面。")print("如需对搜索结果过滤请在打开的页面设定过滤条件进行过滤，不需过滤请运行下一条命令。") 输入验证码：93 验证通过，刷新页面中。。。 输入检索分类号，如：A23A23 输入检索摘要,如：药食药食 请等待数据加载完成，请勿关闭打开的页面。 如需对搜索结果过滤请在打开的页面设定过滤条件进行过滤，不需过滤请运行下一条命令。 二.字段信息爬取（需修改）1234567#专利标题every_title = []for link in driver.find_elements_by_xpath( '//div[@class="item-header clear"]/h1/div[2]/a/b'): title = link.text every_title.append(title)every_title 12345678#申请号every_id = []for link in driver.find_elements_by_xpath( '//div[@class="item-content-body left"]/p[1]'): item_id = link.text item_id = item_id.replace('申请号 :', '') every_id.append(item_id)every_id 12345678#申请日every_date = []for link in driver.find_elements_by_xpath( '//div[@class="item-content-body left"]/p[2]/a'): item_date = link.text #item_id = item_id.replace('申请号 :','') every_date.append(item_date)every_date 12345678#公开号every_public_id = []for link in driver.find_elements_by_xpath( '//div[@class="item-content-body left"]/p[3]'): public_id = link.text public_id = public_id.replace('公开（公告）号 :', '') every_public_id.append(public_id)every_public_id 12345678#公开日every_public_date = []for link in driver.find_elements_by_xpath( '//div[@class="item-content-body left"]/p[4]/a'): public_date = link.text #item_id = item_id.replace('申请号 :','') every_public_date.append(public_date)every_public_date 12345678#IPC分类号every_ipc = []for link in driver.find_elements_by_xpath( '//div[@class="item-content-body left"]/p[5]'): ipc = link.text ipc = ipc.replace('\n', '').replace('IPC分类号 :', '') every_ipc.append(ipc)every_ipc 12345678#申请人every_applyer = []for link in driver.find_elements_by_xpath( '//div[@class="item-content-body left"]/p[6]'): applyer = link.text applyer = applyer.replace('\n', '').replace('申请（专利权）人 :', '') every_applyer.append(applyer)every_applyer 12345678#发明人every_creater = []for link in driver.find_elements_by_xpath( '//div[@class="item-content-body left"]/p[7]'): creater = link.text creater = creater.replace('\n', '').replace('发明人 :', '') every_creater.append(creater)every_creater 12345678#代理人every_agent = []for link in driver.find_elements_by_xpath( '//div[@class="item-content-body left"]/p[8]'): agent = link.text agent = agent.replace('\n', '').replace('代理人 :', '') every_agent.append(agent)every_agent 12345678#代理机构every_agent_group = []for link in driver.find_elements_by_xpath( '//div[@class="item-content-body left"]/p[9]'): agent_group = link.text agent_group = agent_group.replace('\n', '').replace('代理机构 :', '') every_agent_group.append(agent_group)every_agent_group 1234567891011121314151617181920212223f_title = pd.Series(every_title)f_id = pd.Series(every_id)f_date = pd.Series(every_date)f_public_id = pd.Series(every_public_id)f_public_date = pd.Series(every_public_date)f_ipc = pd.Series(every_ipc)f_applyer = pd.Series(every_applyer)f_creater = pd.Series(every_creater)f_agent = pd.Series(every_agent)f_agent_group = pd.Series(every_agent_group)info = pd.DataFrame(&#123; '专利标题': f_title, '申请号': f_id, '申请日': f_date, '公开号': f_public_id, '公开日': f_public_date, 'IPC号': f_ipc, '申请人': f_applyer, '发明人': f_creater, '代理人': f_agent, '代理机构': f_agent_group&#125;)info.to_csv('test_result.csv', index=False) 三.详览页面爬取（分步操作）1.刷新列表内容123456789101112131415161718#切换浏览器状态（爬取一次后列表信息会留存，需通过切换状态刷新）del itemwindows = driver.window_handlesdriver.switch_to.window(windows[0])status = driver.find_element_by_xpath('//a[@mode="SEARCH_MODE"]')select_status = status.get_attribute('class')if 'select' in select_status: driver.find_element_by_xpath('//a[@mode="TABLE_MODE"]').click() time.sleep(2) item = driver.find_elements_by_xpath('//a[@title="详览"]') print("列表式")else: driver.find_element_by_xpath('//a[@mode="SEARCH_MODE"]').click() time.sleep(2) item = driver.find_elements_by_xpath('//a[@role="detail"]') print('搜索式')#获取结果列表print(len(item)) 2.打开详览页面获取信息（报错重新run步骤1）123456789101112131415161718192021222324252627282930313233343536373839404142Row1 = []Row2 = []for i in range(0, len(item)): item[i].click() time.sleep(1) windows = driver.window_handles driver.switch_to.window(windows[1]) try: #element语句判断页面某元素是否加载完成 element = WebDriverWait(driver, 40).until( EC.presence_of_element_located((By.CLASS_NAME, "table-container-title"))) #获取信息 Row1.append("编号") Row1.append("专利名称") Row2.append(i) name = driver.find_element_by_xpath( '//div[@class="table-container-title"]').text Row2.append(name) rowCount = len( driver.find_elements_by_xpath( '//div[@class="table-container"]/table/tbody/tr')) for n in range(1, rowCount): row1 = (driver.find_element_by_xpath( '//div[@class="table-container"]/table/tbody/tr[%s]/td[1]' % (n)).text) row2 = (driver.find_element_by_xpath( '//div[@class="table-container"]/table/tbody/tr[%s]/td[2]' % (n)).text) Row1.append(row1) Row2.append(row2) Row1.append("摘要") zhaiyao = driver.find_element_by_xpath('//*[@class="content"]').text Row2.append(zhaiyao) Rw1 = pd.Series(Row1) Rw2 = pd.Series(Row2) total = pd.DataFrame(&#123;"属性": Rw1, "值": Rw2&#125;) finally: driver.close() print(name) driver.switch_to.window(windows[0]) time.sleep(1) 1total.to_csv('test_专利.csv',index=True,mode='w',encoding="utf-8") 3.爬取详览内容1234567891011121314151617181920windows = driver.window_handlesdriver.switch_to.window(windows[1])rowCount = len( driver.find_elements_by_xpath( '//div[@class="table-container"]/table/tbody/tr'))Row1 = []Row2 = []for i in range(1, rowCount): row1 = (driver.find_element_by_xpath( '//div[@class="table-container"]/table/tbody/tr[%s]/td[1]' % (i)).text) row2 = (driver.find_element_by_xpath( '//div[@class="table-container"]/table/tbody/tr[%s]/td[2]' % (i)).text) Row1.append(row1) Row2.append(row2)Row1.append("摘要")zhaiyao = driver.find_element_by_xpath('//*[@class="content"]').textRow2.append(zhaiyao)Rw1 = pd.Series(Row1)Rw2 = pd.Series(Row2)total = pd.DataFrame(&#123;"属性":Rw1,"值":Rw2&#125;) 4.翻页123#手动翻页driver.find_element_by_link_text('下一页').click()print("请重复1，2步操作") 详览信息获取123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263for l in range(1, 10): windows = driver.window_handles driver.switch_to.window(windows[0]) select_status = status.get_attribute('class') if 'select' in select_status: driver.find_element_by_xpath('//a[@mode="TABLE_MODE"]').click() print("列表式") else: driver.find_element_by_xpath('//a[@mode="SEARCH_MODE"]').click() print('搜索式') #获取结果列表 wait = WebDriverWait(driver, 40) button = wait.until( EC.element_to_be_clickable((By.XPATH, '//a[@role="detail"]'))) item = driver.find_elements_by_xpath('//a[@role="detail"]') print(len(item)) Row1 = [] Row2 = [] for i in range(0, len(item)): item[i].click() time.sleep(1) windows = driver.window_handles driver.switch_to.window(windows[1]) try: #element语句判断页面某元素是否加载完成 element = WebDriverWait(driver, 40).until( EC.presence_of_element_located((By.CLASS_NAME, "table-container-title"))) #获取信息 Row1.append("编号") Row1.append("专利名称") Row2.append(i) name = driver.find_element_by_xpath( '//div[@class="table-container-title"]').text Row2.append(name) rowCount = len( driver.find_elements_by_xpath( '//div[@class="table-container"]/table/tbody/tr')) for n in range(1, rowCount): row1 = (driver.find_element_by_xpath( '//div[@class="table-container"]/table/tbody/tr[%s]/td[1]' % (n)).text) row2 = (driver.find_element_by_xpath( '//div[@class="table-container"]/table/tbody/tr[%s]/td[2]' % (n)).text) Row1.append(row1) Row2.append(row2) Row1.append("摘要") zhaiyao = driver.find_element_by_xpath( '//*[@class="content"]').text Row2.append(zhaiyao) Rw1 = pd.Series(Row1) Rw2 = pd.Series(Row2) total = pd.DataFrame(&#123;"属性": Rw1, "值": Rw2&#125;) total.to_csv('test_for_10.csv', index=True) finally: driver.close() print(name) driver.switch_to.window(windows[0]) time.sleep(1) print("第" + str(l) + "页") driver.find_element_by_link_text('下一页').click() time.sleep(20) 搜索式 12 发明名称 --- 一种提高免疫力的营养保健饮料 发明名称 --- 一种健脾养元的食品组合物及其制备方法 发明名称 --- 提升人体新陈代谢进行减肥的药食同源食品及制备方法 发明名称 --- 药膳羊肚及其制备方法 发明名称 --- 一种具有温肾助阳功效的药食同源组合物及其制备方法 发明名称 --- 一种美肌嫩肤蜂王浆组合物 发明名称 --- 一种菜用黄麻泡菜茶及其制备方法 发明名称 --- 一种具有提神抗疲劳功效的蜂王浆组合物 发明名称 --- 一种含有乌梅的组合物及其制备方法和用途 发明名称 --- 一种降脂减肥的固体饮品及其制备方法 发明名称 --- 一种缓解体力疲劳的洋参阿胶糕制备方法 发明名称 --- 一种适合三高人群的玉谷康营养早餐及其制备方法 第1页 列表式 12 --------------------------------------------------------------------------- WebDriverException Traceback (most recent call last) &lt;ipython-input-20-59068cf3475d&gt; in &lt;module&gt; 18 Row2 = [] 19 for i in range(0, len(item)): ---&gt; 20 item[i].click() 21 time.sleep(1) 22 windows = driver.window_handles ~\AppData\Local\conda\conda\envs\tensorflow\lib\site-packages\selenium\webdriver\remote\webelement.py in click(self) 78 def click(self): 79 &quot;&quot;&quot;Clicks the element.&quot;&quot;&quot; ---&gt; 80 self._execute(Command.CLICK_ELEMENT) 81 82 def submit(self): ~\AppData\Local\conda\conda\envs\tensorflow\lib\site-packages\selenium\webdriver\remote\webelement.py in _execute(self, command, params) 631 params = {} 632 params[&apos;id&apos;] = self._id --&gt; 633 return self._parent.execute(command, params) 634 635 def find_element(self, by=By.ID, value=None): ~\AppData\Local\conda\conda\envs\tensorflow\lib\site-packages\selenium\webdriver\remote\webdriver.py in execute(self, driver_command, params) 319 response = self.command_executor.execute(driver_command, params) 320 if response: --&gt; 321 self.error_handler.check_response(response) 322 response[&apos;value&apos;] = self._unwrap_value( 323 response.get(&apos;value&apos;, None)) ~\AppData\Local\conda\conda\envs\tensorflow\lib\site-packages\selenium\webdriver\remote\errorhandler.py in check_response(self, response) 240 alert_text = value[&apos;alert&apos;].get(&apos;text&apos;) 241 raise exception_class(message, screen, stacktrace, alert_text) --&gt; 242 raise exception_class(message, screen, stacktrace) 243 244 def _value_or_default(self, obj, key, default): WebDriverException: Message: unknown error: Element &lt;a href=&quot;javascript:void(0);&quot; onclick=&quot;detail_single(this);&quot; role=&quot;detail&quot; title=&quot;详览&quot; class=&quot;full-text_sm in-bl&quot;&gt;&lt;/a&gt; is not clickable at point (637, 10). Other element would receive the click: &lt;div id=&quot;tool_sort&quot; class=&quot;select in-bl jq-select-container&quot; style=&quot;vertical-align: top; display: none; width: 120px; height: 30px;&quot; data-height=&quot;30&quot; data-width=&quot;120&quot; data-border=&quot;false&quot; data-handler=&quot;sort_tool_callback&quot; value=&quot;-APD&quot;&gt;...&lt;/div&gt; (Session info: chrome=72.0.3626.119) (Driver info: chromedriver=2.43.600210 (68dcf5eebde37173d4027fa8635e332711d2874a),platform=Windows NT 10.0.17763 x86_64) 详览其二1item [&lt;selenium.webdriver.remote.webelement.WebElement (session=&quot;ead56071ee2fe51b7a5fe3963e39963f&quot;, element=&quot;0.15422172092949826-211&quot;)&gt;, &lt;selenium.webdriver.remote.webelement.WebElement (session=&quot;ead56071ee2fe51b7a5fe3963e39963f&quot;, element=&quot;0.15422172092949826-212&quot;)&gt;, &lt;selenium.webdriver.remote.webelement.WebElement (session=&quot;ead56071ee2fe51b7a5fe3963e39963f&quot;, element=&quot;0.15422172092949826-213&quot;)&gt;, &lt;selenium.webdriver.remote.webelement.WebElement (session=&quot;ead56071ee2fe51b7a5fe3963e39963f&quot;, element=&quot;0.15422172092949826-214&quot;)&gt;, &lt;selenium.webdriver.remote.webelement.WebElement (session=&quot;ead56071ee2fe51b7a5fe3963e39963f&quot;, element=&quot;0.15422172092949826-215&quot;)&gt;, &lt;selenium.webdriver.remote.webelement.WebElement (session=&quot;ead56071ee2fe51b7a5fe3963e39963f&quot;, element=&quot;0.15422172092949826-216&quot;)&gt;, &lt;selenium.webdriver.remote.webelement.WebElement (session=&quot;ead56071ee2fe51b7a5fe3963e39963f&quot;, element=&quot;0.15422172092949826-217&quot;)&gt;, &lt;selenium.webdriver.remote.webelement.WebElement (session=&quot;ead56071ee2fe51b7a5fe3963e39963f&quot;, element=&quot;0.15422172092949826-218&quot;)&gt;, &lt;selenium.webdriver.remote.webelement.WebElement (session=&quot;ead56071ee2fe51b7a5fe3963e39963f&quot;, element=&quot;0.15422172092949826-219&quot;)&gt;, &lt;selenium.webdriver.remote.webelement.WebElement (session=&quot;ead56071ee2fe51b7a5fe3963e39963f&quot;, element=&quot;0.15422172092949826-220&quot;)&gt;, &lt;selenium.webdriver.remote.webelement.WebElement (session=&quot;ead56071ee2fe51b7a5fe3963e39963f&quot;, element=&quot;0.15422172092949826-221&quot;)&gt;, &lt;selenium.webdriver.remote.webelement.WebElement (session=&quot;ead56071ee2fe51b7a5fe3963e39963f&quot;, element=&quot;0.15422172092949826-222&quot;)&gt;] 12]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>博客</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2Fhm773%2F4a17b156.html</url>
    <content type="text"><![CDATA[该文章是加密文章，请输入密码访问： Incorrect Password! No content to display! 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]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>建站</tag>
        <tag>新手入门</tag>
      </tags>
  </entry>
</search>
