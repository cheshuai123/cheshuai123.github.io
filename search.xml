<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[专利数据爬取（博客测试）]]></title>
    <url>%2Fhm773%2F27633c18.html</url>
    <content type="text"><![CDATA[一.模块加载与登录检索 1234567import csvimport timeimport pandas as pdfrom selenium import webdriverfrom selenium.webdriver.common.by import Byfrom selenium.webdriver.support.ui import WebDriverWaitfrom selenium.webdriver.support import expected_conditions as EC 1234567891011121314151617181920212223242526272829303132#登陆验证driver = webdriver.Chrome()driver.get( "http://www.pss-system.gov.cn/sipopublicsearch/portal/uilogin-forwardLogin.shtml")locator = (By.LINK_TEXT, '登录')try: WebDriverWait(driver, 20, 0.5).until( EC.presence_of_element_located(locator)) name = driver.find_element_by_xpath('//input[@name="j_username"]') name.send_keys("hm773") password = driver.find_element_by_xpath('//input[@id="j_password_show"]') password.send_keys('1234567890qaz') captcha = driver.find_element_by_xpath( '//input[@name="j_validation_code"]') captcha.send_keys(input("输入验证码："))finally: driver.find_element_by_xpath('//a[@class="btn btn-login"]').click()time.sleep(2)print('验证通过，刷新页面中。。。')driver.get( 'http://www.pss-system.gov.cn/sipopublicsearch/patentsearch/tableSearch-showTableSearchIndex.shtml')time.sleep(2)#输入检索要求name = driver.find_element_by_xpath('//input[@indexcnname="IPC分类号"]')name.send_keys(input("输入检索分类号，如：A23"))summary = driver.find_element_by_xpath('//input[@indexcnname="摘要"]')summary.send_keys(input("输入检索摘要,如：药食"))driver.find_element_by_xpath('//a[@class="btn btn-search"]').click()print("请等待数据加载完成，请勿关闭打开的页面。")print("如需对搜索结果过滤请在打开的页面设定过滤条件进行过滤，不需过滤请运行下一条命令。") 输入验证码：93 验证通过，刷新页面中。。。 输入检索分类号，如：A23A23 输入检索摘要,如：药食药食 请等待数据加载完成，请勿关闭打开的页面。 如需对搜索结果过滤请在打开的页面设定过滤条件进行过滤，不需过滤请运行下一条命令。 二.字段信息爬取（需修改）1234567#专利标题every_title = []for link in driver.find_elements_by_xpath( '//div[@class="item-header clear"]/h1/div[2]/a/b'): title = link.text every_title.append(title)every_title 12345678#申请号every_id = []for link in driver.find_elements_by_xpath( '//div[@class="item-content-body left"]/p[1]'): item_id = link.text item_id = item_id.replace('申请号 :', '') every_id.append(item_id)every_id 12345678#申请日every_date = []for link in driver.find_elements_by_xpath( '//div[@class="item-content-body left"]/p[2]/a'): item_date = link.text #item_id = item_id.replace('申请号 :','') every_date.append(item_date)every_date 12345678#公开号every_public_id = []for link in driver.find_elements_by_xpath( '//div[@class="item-content-body left"]/p[3]'): public_id = link.text public_id = public_id.replace('公开（公告）号 :', '') every_public_id.append(public_id)every_public_id 12345678#公开日every_public_date = []for link in driver.find_elements_by_xpath( '//div[@class="item-content-body left"]/p[4]/a'): public_date = link.text #item_id = item_id.replace('申请号 :','') every_public_date.append(public_date)every_public_date 12345678#IPC分类号every_ipc = []for link in driver.find_elements_by_xpath( '//div[@class="item-content-body left"]/p[5]'): ipc = link.text ipc = ipc.replace('\n', '').replace('IPC分类号 :', '') every_ipc.append(ipc)every_ipc 12345678#申请人every_applyer = []for link in driver.find_elements_by_xpath( '//div[@class="item-content-body left"]/p[6]'): applyer = link.text applyer = applyer.replace('\n', '').replace('申请（专利权）人 :', '') every_applyer.append(applyer)every_applyer 12345678#发明人every_creater = []for link in driver.find_elements_by_xpath( '//div[@class="item-content-body left"]/p[7]'): creater = link.text creater = creater.replace('\n', '').replace('发明人 :', '') every_creater.append(creater)every_creater 12345678#代理人every_agent = []for link in driver.find_elements_by_xpath( '//div[@class="item-content-body left"]/p[8]'): agent = link.text agent = agent.replace('\n', '').replace('代理人 :', '') every_agent.append(agent)every_agent 12345678#代理机构every_agent_group = []for link in driver.find_elements_by_xpath( '//div[@class="item-content-body left"]/p[9]'): agent_group = link.text agent_group = agent_group.replace('\n', '').replace('代理机构 :', '') every_agent_group.append(agent_group)every_agent_group 1234567891011121314151617181920212223f_title = pd.Series(every_title)f_id = pd.Series(every_id)f_date = pd.Series(every_date)f_public_id = pd.Series(every_public_id)f_public_date = pd.Series(every_public_date)f_ipc = pd.Series(every_ipc)f_applyer = pd.Series(every_applyer)f_creater = pd.Series(every_creater)f_agent = pd.Series(every_agent)f_agent_group = pd.Series(every_agent_group)info = pd.DataFrame(&#123; '专利标题': f_title, '申请号': f_id, '申请日': f_date, '公开号': f_public_id, '公开日': f_public_date, 'IPC号': f_ipc, '申请人': f_applyer, '发明人': f_creater, '代理人': f_agent, '代理机构': f_agent_group&#125;)info.to_csv('test_result.csv', index=False) 三.详览页面爬取（分步操作）1.刷新列表内容123456789101112131415161718#切换浏览器状态（爬取一次后列表信息会留存，需通过切换状态刷新）del itemwindows = driver.window_handlesdriver.switch_to.window(windows[0])status = driver.find_element_by_xpath('//a[@mode="SEARCH_MODE"]')select_status = status.get_attribute('class')if 'select' in select_status: driver.find_element_by_xpath('//a[@mode="TABLE_MODE"]').click() time.sleep(2) item = driver.find_elements_by_xpath('//a[@title="详览"]') print("列表式")else: driver.find_element_by_xpath('//a[@mode="SEARCH_MODE"]').click() time.sleep(2) item = driver.find_elements_by_xpath('//a[@role="detail"]') print('搜索式')#获取结果列表print(len(item)) 2.打开详览页面获取信息（报错重新run步骤1）123456789101112131415161718192021222324252627282930313233343536373839404142Row1 = []Row2 = []for i in range(0, len(item)): item[i].click() time.sleep(1) windows = driver.window_handles driver.switch_to.window(windows[1]) try: #element语句判断页面某元素是否加载完成 element = WebDriverWait(driver, 40).until( EC.presence_of_element_located((By.CLASS_NAME, "table-container-title"))) #获取信息 Row1.append("编号") Row1.append("专利名称") Row2.append(i) name = driver.find_element_by_xpath( '//div[@class="table-container-title"]').text Row2.append(name) rowCount = len( driver.find_elements_by_xpath( '//div[@class="table-container"]/table/tbody/tr')) for n in range(1, rowCount): row1 = (driver.find_element_by_xpath( '//div[@class="table-container"]/table/tbody/tr[%s]/td[1]' % (n)).text) row2 = (driver.find_element_by_xpath( '//div[@class="table-container"]/table/tbody/tr[%s]/td[2]' % (n)).text) Row1.append(row1) Row2.append(row2) Row1.append("摘要") zhaiyao = driver.find_element_by_xpath('//*[@class="content"]').text Row2.append(zhaiyao) Rw1 = pd.Series(Row1) Rw2 = pd.Series(Row2) total = pd.DataFrame(&#123;"属性": Rw1, "值": Rw2&#125;) finally: driver.close() print(name) driver.switch_to.window(windows[0]) time.sleep(1) 1total.to_csv('test_专利.csv',index=True,mode='w',encoding="utf-8") 3.爬取详览内容1234567891011121314151617181920windows = driver.window_handlesdriver.switch_to.window(windows[1])rowCount = len( driver.find_elements_by_xpath( '//div[@class="table-container"]/table/tbody/tr'))Row1 = []Row2 = []for i in range(1, rowCount): row1 = (driver.find_element_by_xpath( '//div[@class="table-container"]/table/tbody/tr[%s]/td[1]' % (i)).text) row2 = (driver.find_element_by_xpath( '//div[@class="table-container"]/table/tbody/tr[%s]/td[2]' % (i)).text) Row1.append(row1) Row2.append(row2)Row1.append("摘要")zhaiyao = driver.find_element_by_xpath('//*[@class="content"]').textRow2.append(zhaiyao)Rw1 = pd.Series(Row1)Rw2 = pd.Series(Row2)total = pd.DataFrame(&#123;"属性":Rw1,"值":Rw2&#125;) 4.翻页123#手动翻页driver.find_element_by_link_text('下一页').click()print("请重复1，2步操作") 详览信息获取123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263for l in range(1, 10): windows = driver.window_handles driver.switch_to.window(windows[0]) select_status = status.get_attribute('class') if 'select' in select_status: driver.find_element_by_xpath('//a[@mode="TABLE_MODE"]').click() print("列表式") else: driver.find_element_by_xpath('//a[@mode="SEARCH_MODE"]').click() print('搜索式') #获取结果列表 wait = WebDriverWait(driver, 40) button = wait.until( EC.element_to_be_clickable((By.XPATH, '//a[@role="detail"]'))) item = driver.find_elements_by_xpath('//a[@role="detail"]') print(len(item)) Row1 = [] Row2 = [] for i in range(0, len(item)): item[i].click() time.sleep(1) windows = driver.window_handles driver.switch_to.window(windows[1]) try: #element语句判断页面某元素是否加载完成 element = WebDriverWait(driver, 40).until( EC.presence_of_element_located((By.CLASS_NAME, "table-container-title"))) #获取信息 Row1.append("编号") Row1.append("专利名称") Row2.append(i) name = driver.find_element_by_xpath( '//div[@class="table-container-title"]').text Row2.append(name) rowCount = len( driver.find_elements_by_xpath( '//div[@class="table-container"]/table/tbody/tr')) for n in range(1, rowCount): row1 = (driver.find_element_by_xpath( '//div[@class="table-container"]/table/tbody/tr[%s]/td[1]' % (n)).text) row2 = (driver.find_element_by_xpath( '//div[@class="table-container"]/table/tbody/tr[%s]/td[2]' % (n)).text) Row1.append(row1) Row2.append(row2) Row1.append("摘要") zhaiyao = driver.find_element_by_xpath( '//*[@class="content"]').text Row2.append(zhaiyao) Rw1 = pd.Series(Row1) Rw2 = pd.Series(Row2) total = pd.DataFrame(&#123;"属性": Rw1, "值": Rw2&#125;) total.to_csv('test_for_10.csv', index=True) finally: driver.close() print(name) driver.switch_to.window(windows[0]) time.sleep(1) print("第" + str(l) + "页") driver.find_element_by_link_text('下一页').click() time.sleep(20) 搜索式 12 发明名称 --- 一种提高免疫力的营养保健饮料 发明名称 --- 一种健脾养元的食品组合物及其制备方法 发明名称 --- 提升人体新陈代谢进行减肥的药食同源食品及制备方法 发明名称 --- 药膳羊肚及其制备方法 发明名称 --- 一种具有温肾助阳功效的药食同源组合物及其制备方法 发明名称 --- 一种美肌嫩肤蜂王浆组合物 发明名称 --- 一种菜用黄麻泡菜茶及其制备方法 发明名称 --- 一种具有提神抗疲劳功效的蜂王浆组合物 发明名称 --- 一种含有乌梅的组合物及其制备方法和用途 发明名称 --- 一种降脂减肥的固体饮品及其制备方法 发明名称 --- 一种缓解体力疲劳的洋参阿胶糕制备方法 发明名称 --- 一种适合三高人群的玉谷康营养早餐及其制备方法 第1页 列表式 12 --------------------------------------------------------------------------- WebDriverException Traceback (most recent call last) &lt;ipython-input-20-59068cf3475d&gt; in &lt;module&gt; 18 Row2 = [] 19 for i in range(0, len(item)): ---&gt; 20 item[i].click() 21 time.sleep(1) 22 windows = driver.window_handles ~\AppData\Local\conda\conda\envs\tensorflow\lib\site-packages\selenium\webdriver\remote\webelement.py in click(self) 78 def click(self): 79 &quot;&quot;&quot;Clicks the element.&quot;&quot;&quot; ---&gt; 80 self._execute(Command.CLICK_ELEMENT) 81 82 def submit(self): ~\AppData\Local\conda\conda\envs\tensorflow\lib\site-packages\selenium\webdriver\remote\webelement.py in _execute(self, command, params) 631 params = {} 632 params[&apos;id&apos;] = self._id --&gt; 633 return self._parent.execute(command, params) 634 635 def find_element(self, by=By.ID, value=None): ~\AppData\Local\conda\conda\envs\tensorflow\lib\site-packages\selenium\webdriver\remote\webdriver.py in execute(self, driver_command, params) 319 response = self.command_executor.execute(driver_command, params) 320 if response: --&gt; 321 self.error_handler.check_response(response) 322 response[&apos;value&apos;] = self._unwrap_value( 323 response.get(&apos;value&apos;, None)) ~\AppData\Local\conda\conda\envs\tensorflow\lib\site-packages\selenium\webdriver\remote\errorhandler.py in check_response(self, response) 240 alert_text = value[&apos;alert&apos;].get(&apos;text&apos;) 241 raise exception_class(message, screen, stacktrace, alert_text) --&gt; 242 raise exception_class(message, screen, stacktrace) 243 244 def _value_or_default(self, obj, key, default): WebDriverException: Message: unknown error: Element &lt;a href=&quot;javascript:void(0);&quot; onclick=&quot;detail_single(this);&quot; role=&quot;detail&quot; title=&quot;详览&quot; class=&quot;full-text_sm in-bl&quot;&gt;&lt;/a&gt; is not clickable at point (637, 10). Other element would receive the click: &lt;div id=&quot;tool_sort&quot; class=&quot;select in-bl jq-select-container&quot; style=&quot;vertical-align: top; display: none; width: 120px; height: 30px;&quot; data-height=&quot;30&quot; data-width=&quot;120&quot; data-border=&quot;false&quot; data-handler=&quot;sort_tool_callback&quot; value=&quot;-APD&quot;&gt;...&lt;/div&gt; (Session info: chrome=72.0.3626.119) (Driver info: chromedriver=2.43.600210 (68dcf5eebde37173d4027fa8635e332711d2874a),platform=Windows NT 10.0.17763 x86_64) 详览其二1item [&lt;selenium.webdriver.remote.webelement.WebElement (session=&quot;ead56071ee2fe51b7a5fe3963e39963f&quot;, element=&quot;0.15422172092949826-211&quot;)&gt;, &lt;selenium.webdriver.remote.webelement.WebElement (session=&quot;ead56071ee2fe51b7a5fe3963e39963f&quot;, element=&quot;0.15422172092949826-212&quot;)&gt;, &lt;selenium.webdriver.remote.webelement.WebElement (session=&quot;ead56071ee2fe51b7a5fe3963e39963f&quot;, element=&quot;0.15422172092949826-213&quot;)&gt;, &lt;selenium.webdriver.remote.webelement.WebElement (session=&quot;ead56071ee2fe51b7a5fe3963e39963f&quot;, element=&quot;0.15422172092949826-214&quot;)&gt;, &lt;selenium.webdriver.remote.webelement.WebElement (session=&quot;ead56071ee2fe51b7a5fe3963e39963f&quot;, element=&quot;0.15422172092949826-215&quot;)&gt;, &lt;selenium.webdriver.remote.webelement.WebElement (session=&quot;ead56071ee2fe51b7a5fe3963e39963f&quot;, element=&quot;0.15422172092949826-216&quot;)&gt;, &lt;selenium.webdriver.remote.webelement.WebElement (session=&quot;ead56071ee2fe51b7a5fe3963e39963f&quot;, element=&quot;0.15422172092949826-217&quot;)&gt;, &lt;selenium.webdriver.remote.webelement.WebElement (session=&quot;ead56071ee2fe51b7a5fe3963e39963f&quot;, element=&quot;0.15422172092949826-218&quot;)&gt;, &lt;selenium.webdriver.remote.webelement.WebElement (session=&quot;ead56071ee2fe51b7a5fe3963e39963f&quot;, element=&quot;0.15422172092949826-219&quot;)&gt;, &lt;selenium.webdriver.remote.webelement.WebElement (session=&quot;ead56071ee2fe51b7a5fe3963e39963f&quot;, element=&quot;0.15422172092949826-220&quot;)&gt;, &lt;selenium.webdriver.remote.webelement.WebElement (session=&quot;ead56071ee2fe51b7a5fe3963e39963f&quot;, element=&quot;0.15422172092949826-221&quot;)&gt;, &lt;selenium.webdriver.remote.webelement.WebElement (session=&quot;ead56071ee2fe51b7a5fe3963e39963f&quot;, element=&quot;0.15422172092949826-222&quot;)&gt;] 12]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>博客</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2Fhm773%2F4a17b156.html</url>
    <content type="text"><![CDATA[该文章是加密文章，请输入密码访问： Incorrect Password! No content to display! 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]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>建站</tag>
        <tag>新手入门</tag>
      </tags>
  </entry>
</search>
